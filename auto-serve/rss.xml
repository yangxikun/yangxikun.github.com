<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Kun Blog</title>
        <description>Kun Blog - Rokety Yang</description>
        <link>http://yangxikun.github.io</link>
        <link>http://yangxikun.github.io</link>
        <lastBuildDate>2013-11-13T21:46:05+08:00</lastBuildDate>
        <pubDate>2013-11-13T21:46:05+08:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Linux 进程、进程组、会话周期、控制终端</title>
                <description>&lt;h3 id='id92'&gt;进程&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;为使程序能并发执行，且为了对并发（并发指两个或多个事件在同一时间间隔内发生）执行的程序加以描述和控制，于是引入了“进程”的概念。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id93'&gt;守护进程&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;守护进程，也就是通常说的Daemon进程，是Linux中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。守护进程是脱离于终端并且在后台运行的进程。守护进程脱离于终端是为了避免进程在执行过程中的信息在任何终端上显示并且进程也不会被任何终端所产生的终端信息所打断。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id94'&gt;进程组&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;每个进程都属于一个进程组。每个进程组都有一个组长进程，组长进程的进程号等于进程组ID。只要某个进程组中有一个进程存在，则该进程组就存在，与组长进程是否终止无关。从进程组创建开始到其中最后一个进程离开为止的时间区间成为进程组的生存期。进程组中最后一个进程可以终止或者转移到另一个进程组中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id95'&gt;会话周期&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;会话周期是一个或多个进程组的集合。通常，一个会话开始于用户登录，终止于用户退出，在此期间该用户运行的所有进程都属于这个会话期。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id96'&gt;控制终端&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;会话的领头进程打开一个终端之后, 该终端就成为该会话的控制终端 (SVR4/Linux) 与控制终端建立连接的会话领头进程称为控制进程 (session leader) 。一个会话只能有一个控制终端 ，产生在控制终端上的输入和信号将发送给会话的前台进程组中的所有进程 ，终端上的连接断开时 (比如网络断开或 Modem 断开), 挂起信号将发送到控制进程(session leader) 。平时在X-window下是使用的terminal称为伪终端，但它也是一个控制终端。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id97'&gt;僵死进程&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;fork()/execve()&lt;/code&gt;过程中，假设子进程结束时父进程仍存在，而父进程&lt;code&gt;fork()&lt;/code&gt;之前既没安装&lt;code&gt;SIGCHLD&lt;/code&gt;信号处理函数调用&lt;code&gt;waitpid()&lt;/code&gt;等待子进程结束，又没有显式忽略该信号，则子进程成为僵死进程，无法正常结束，此时即使是root身份&lt;code&gt;kill -9&lt;/code&gt;也不能杀死僵死进程。补救办法是杀死僵尸进程的父进程(僵死进程的父进程必然存在)，僵死进程成为&amp;#8221;孤儿进程&amp;#8221;，过继给1号进程&lt;code&gt;init&lt;/code&gt;，&lt;code&gt;init&lt;/code&gt;始终会负责清理僵死进程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id='id98'&gt;守护进程编写的要点：&lt;/h4&gt;

&lt;p&gt;1、在父进程（此时是一个进程组的组长）中使用fork()产生子进程（将来的守护进程由它产生）； 2、调用setsid()，用于生成一个新的会话 注意如果当前进程是会话组长时，调用失败。第一点已经可以保证进程不是会话组长了，所以setsid()调用成功后，进程成为新的会话组长和新的进程组长，并与原来的登录会话和进程组脱离。由于会话对控制终端的独占性，进程同时与控制终端脱离； 3、禁止进程重新打开控制终端 第二步之后，进程已经成为无终端的会话组长。但它可以重新申请打开一个控制终端。可以通过使进程不再成为会话组长来禁止进程重新打开控制终端，在上面的控制终端中已经提到了只有会话组长才能打开控制终端； 4、关闭打开的文件描述符 进程从创建它的父进程那里继承了打开的文件描述符。如不关闭，将会浪费系统资源，造成进程所在的文件系统无法卸下以及引起无法预料的错误； 5、改变当前工作目录 进程活动时，其工作目录所在的文件系统不能卸下。一般需要将工作目录改变到根目录。对于需要转储核心，写运行日志的进程将工作目录改变到特定目录如&lt;code&gt;/tmp&lt;/code&gt;； 6、重设文件创建掩模 进程从创建它的父进程那里继承了文件创建掩模。它可能修改守护进程所创建的文件的存取位。为防止这一点，将文件创建掩模清除：&lt;code&gt;umask(0)&lt;/code&gt;； 7、处理SIGCHLD信号 处理SIGCHLD信号并不是必须的。但对于某些进程，特别是服务器进程往往在请求到来时生成子进程处理请求。如果父进程不等待子进程结束，子进程将成为僵尸进程（zombie）从而占用系统资源。如果父进程等待子进程结束，将增加父进程的负担，影响服务器进程的并发性能。在Linux下可以简单地将&lt;code&gt;SIGCHLD&lt;/code&gt;信号的操作设为&lt;code&gt;SIG_IGN&lt;/code&gt;。 &lt;code&gt;signal(SIGCHLD,SIG_IGN); &lt;/code&gt; 这样，内核在子进程结束时不会产生僵尸进程。这一点与BSD4不同，BSD4下必须显式等待子进程结束才能释放僵尸进程。 8、重定向标准输入、标准输出和标准错误输出到&lt;code&gt;/dev/null&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先来看看上面第1步是为何，编译执行下面代码：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; 
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;main&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='kt'&gt;pid_t&lt;/span&gt; &lt;span class='n'&gt;pid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='n'&gt;pid&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;fork&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pid&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;         &lt;span class='n'&gt;perror&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;fork&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pid&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//父进程&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='n'&gt;printf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Parent pid:%d&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;getpid&lt;/span&gt;&lt;span class='p'&gt;());&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;         &lt;span class='n'&gt;sleep&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;30&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;         &lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;         &lt;span class='n'&gt;printf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Child pid:%d&lt;/span&gt;&lt;span class='se'&gt;\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;getpid&lt;/span&gt;&lt;span class='p'&gt;());&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;         &lt;span class='n'&gt;sleep&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;30&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//子进程&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;         &lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然后在另一个terminal中执行：&lt;code&gt;ps axj | grep tp&lt;/code&gt; &lt;img alt='process' src='/assets/img/201311130101.png' /&gt; 从上图可以看出父进程的PID是7667，且是进程组7667的组长，所以我们写守护进程的第一步就是要使用&lt;code&gt;fork()&lt;/code&gt;产生子进程。&lt;/p&gt;

&lt;h3 id='id99'&gt;守护进程实例&lt;/h3&gt;

&lt;p&gt;源代码：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/param.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;time.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;init_daemon&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='kt'&gt;pid_t&lt;/span&gt; &lt;span class='n'&gt;pid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; 
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pid&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;fork&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//是父进程，结束父进程&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;         &lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pid&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//fork()失败&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;         &lt;span class='n'&gt;perror&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;fork&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; 
&lt;span class='lineno'&gt;21&lt;/span&gt;     &lt;span class='c1'&gt;//是第一子进程，继续执行&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;     &lt;span class='n'&gt;setsid&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;&lt;span class='c1'&gt;//第一子进程成为新的会话组长和进程组长，并与控制终端分离，为了防止其再打开一个控制终端，再调用一次fork()&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pid&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;fork&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//是第一子进程，结束第一子进程&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;         &lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pid&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//fork()失败&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;         &lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt; 
&lt;span class='lineno'&gt;29&lt;/span&gt;     &lt;span class='c1'&gt;//是第二子进程，继续执行，已经不再是会话组长，执行关闭文件描述符操作&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;NOFILE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt;         &lt;span class='n'&gt;close&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt; 
&lt;span class='lineno'&gt;34&lt;/span&gt;     &lt;span class='c1'&gt;//改变工作目录&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt;     &lt;span class='n'&gt;chdir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;36&lt;/span&gt; 
&lt;span class='lineno'&gt;37&lt;/span&gt;     &lt;span class='c1'&gt;//重设文件创建掩模&lt;/span&gt;
&lt;span class='lineno'&gt;38&lt;/span&gt;     &lt;span class='n'&gt;umask&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;39&lt;/span&gt; 
&lt;span class='lineno'&gt;40&lt;/span&gt;     &lt;span class='c1'&gt;//重定向标准输入、标准输出、标准错误输出到/dev/NULL&lt;/span&gt;
&lt;span class='lineno'&gt;41&lt;/span&gt;     &lt;span class='cm'&gt;/*&lt;/span&gt;
&lt;span class='lineno'&gt;42&lt;/span&gt; &lt;span class='cm'&gt;     * STDERR_FILENO = 2 标准错误输出 &lt;/span&gt;
&lt;span class='lineno'&gt;43&lt;/span&gt; &lt;span class='cm'&gt;     * STDIN_FILENO = 0 标准输入 &lt;/span&gt;
&lt;span class='lineno'&gt;44&lt;/span&gt; &lt;span class='cm'&gt;     * STDOUT_FILENO = 1 标准输出&lt;/span&gt;
&lt;span class='lineno'&gt;45&lt;/span&gt; &lt;span class='cm'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;46&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;fp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;O_RDWR&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;47&lt;/span&gt;     &lt;span class='n'&gt;dup2&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;STDERR_FILENO&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;48&lt;/span&gt;     &lt;span class='n'&gt;dup2&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;STDIN_FILENO&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;49&lt;/span&gt;     &lt;span class='n'&gt;dup2&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;STDOUT_FILENO&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;50&lt;/span&gt; 
&lt;span class='lineno'&gt;51&lt;/span&gt;     &lt;span class='c1'&gt;//处理SIGCHLD信号&lt;/span&gt;
&lt;span class='lineno'&gt;52&lt;/span&gt;     &lt;span class='n'&gt;signal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SIGCHLD&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;SIG_IGN&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;53&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;54&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;55&lt;/span&gt; 
&lt;span class='lineno'&gt;56&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;main&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;57&lt;/span&gt;     &lt;span class='kt'&gt;FILE&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;58&lt;/span&gt;     &lt;span class='kt'&gt;time_t&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;59&lt;/span&gt;     &lt;span class='n'&gt;init_daemon&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;60&lt;/span&gt; 
&lt;span class='lineno'&gt;61&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;62&lt;/span&gt;         &lt;span class='n'&gt;sleep&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//睡眠10妙&lt;/span&gt;
&lt;span class='lineno'&gt;63&lt;/span&gt;         &lt;span class='n'&gt;fp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;fopen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test.log&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;64&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='nb'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;65&lt;/span&gt;             &lt;span class='n'&gt;time&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;66&lt;/span&gt;             &lt;span class='n'&gt;fprintf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Now time is %s&lt;/span&gt;&lt;span class='se'&gt;\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;asctime&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;gmtime&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;)));&lt;/span&gt;
&lt;span class='lineno'&gt;67&lt;/span&gt;             &lt;span class='n'&gt;fclose&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fp&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;68&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;69&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;70&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;查看守护进程： &lt;img alt='process' src='/assets/img/201311130102.png' /&gt; 由上图可以看出，守护进程的PID为8368，所属进程组为8367，会话ID为8367，没有控制终端，最重要的一点是父进程为1（即init进程）。&lt;/p&gt;</description>
                <link>http://yangxikun.github.io/Linux/2013/11/11/linux-process</link>
                <guid>http://yangxikun.github.io/Linux/2013/11/11/linux-process</guid>
                <pubDate>2013-11-11T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>conky配置略懂点</title>
                <description>&lt;h3 id='conky'&gt;关于conky配置的一点说明&lt;/h3&gt;

&lt;p&gt;昨晚想安装个conky，但遇到了一些奇葩的问题，我的&lt;code&gt;Linux Mint&lt;/code&gt;无法运行&lt;code&gt;conky_clock_ring()&lt;/code&gt;这个函数，用于绘制有时钟的那个东东。网上有人解决了，可按照他们的方法，我这里就是不行。无奈，只好找那些没有时钟的conky了。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://seajey.deviantart.com/art/Conky-Seamod-v0-1-283461046'&gt;漂亮的conky下载&lt;/a&gt;，我下载的就是链接这个，能显示出来，可发现高度不够！我的屏幕是14寸笔记本，想必作者的屏幕应该有16寸。好吧，自己调一下高度吧，经过不断摸索，花了两个小时，基本弄清了这个conky是怎么回事了。&lt;/p&gt;

&lt;p&gt;conky主要由两部分组成：1、&lt;code&gt;conkyrc配置脚本&lt;/code&gt;；2、&lt;code&gt;lua脚本&lt;/code&gt;，主要用于一些动态效果，以及显示出来的那个圆圈效果。所以你可以只配置&lt;code&gt;conkyrc&lt;/code&gt;，但想要更好的效果就需要lua脚本了。&lt;/p&gt;

&lt;p&gt;关于&lt;code&gt;conkyrc&lt;/code&gt;的配置参数详解，google搜一下就有了，这里主要记录自己是如何调整高度的。在&lt;code&gt;conkyrc&lt;/code&gt;中，我注释掉了&lt;code&gt;disk&lt;/code&gt;（显示磁盘信息的）这部分，这样就剩下&lt;code&gt;CPU、MEM、ETHERNET&lt;/code&gt;三个部分，对于我的屏幕高度来说刚好。但是发现现实&lt;code&gt;disk&lt;/code&gt;的那个圆圈还在，于是蛋疼了一下，打开&lt;code&gt;lua脚本&lt;/code&gt;发现原来每一块在&lt;code&gt;lua&lt;/code&gt;中都有配置。&lt;/p&gt;

&lt;p&gt;于是在lua脚本中我注释掉了&lt;code&gt;fs_used_perc&lt;/code&gt;这几块配置，这样圆圈就消失了。在每一块{}配置中，x和y参数是配置坐标的，自己调一下就知道了，在这里还可以修改许多参数，你可以自己试着修改，然后看看效果如何。在修改&lt;code&gt;lua脚本&lt;/code&gt;和&lt;code&gt;conkyrc&lt;/code&gt;时，都不需要重启conky，一旦配置被修改，conky会自动重新渲染图像，这样修改起来确实很方便。其他配置就没再摸索了，暂时先这样吧。附上我的效果图：&lt;/p&gt;

&lt;p&gt;&lt;img alt='conky' src='/assets/img/201311100101.png' /&gt;&lt;/p&gt;</description>
                <link>http://yangxikun.github.io/Linux/2013/11/10/conky</link>
                <guid>http://yangxikun.github.io/Linux/2013/11/10/conky</guid>
                <pubDate>2013-11-10T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>使用共享内存和信号量模仿cp命令</title>
                <description>&lt;h3 id='id91'&gt;学习共享内存和信号量的结合使用&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;学习自《linux网络编程》，以下实例程序也是仿照书上的，但是觉得书本上的实现有问题，会发生死锁，自己修改了实现方法。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;实例程序shmcopy功能：把一个文件复制为另一个文件（usage:shmcopy a b）。每次调用shmcopy就形成两个进程——读进程和写进程。它们共享两个缓冲区，这两个缓冲区作为共享内存顿来实现。当读进程把数据写入第一个缓冲区期间，写进程就把第二个缓冲区内容写出去。反之亦然。由于读和写是并发进行的，所以数据吞吐量增加了。&lt;/p&gt;

&lt;p&gt;为了使两个进程同步，防止读进程把缓冲区装满之前，写进程就把该缓冲区内容写出去。我们使用了两个信号量。因为共享存储器机构本身没有提供同步功能。&lt;/p&gt;

&lt;p&gt;书上的实现思路（读进程和写进程都是循环执行的）：&lt;/p&gt;

&lt;p&gt;&lt;img alt='complict' src='/assets/img/201311080101.png' /&gt;&lt;/p&gt;

&lt;p&gt;我的思路（修改了写进程）：&lt;/p&gt;

&lt;p&gt;&lt;img alt='right' src='/assets/img/201311080102.png' /&gt;&lt;/p&gt;

&lt;p&gt;源代码：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;  1&lt;/span&gt; &lt;span class='cp'&gt;#ifndef __USE_FILE_OFFSET64&lt;/span&gt;
&lt;span class='lineno'&gt;  2&lt;/span&gt; &lt;span class='cp'&gt;#define __USE_FILE_OFFSET64&lt;/span&gt;
&lt;span class='lineno'&gt;  3&lt;/span&gt; &lt;span class='cp'&gt;#endif&lt;/span&gt;
&lt;span class='lineno'&gt;  4&lt;/span&gt; 
&lt;span class='lineno'&gt;  5&lt;/span&gt; &lt;span class='cp'&gt;#ifndef __USE_LARGEFILE64&lt;/span&gt;
&lt;span class='lineno'&gt;  6&lt;/span&gt; &lt;span class='cp'&gt;#define __USE_LARGEFILE64&lt;/span&gt;
&lt;span class='lineno'&gt;  7&lt;/span&gt; &lt;span class='cp'&gt;#endif&lt;/span&gt;
&lt;span class='lineno'&gt;  8&lt;/span&gt; 
&lt;span class='lineno'&gt;  9&lt;/span&gt; &lt;span class='cp'&gt;#ifndef _LARGEFILE64_SOURCE&lt;/span&gt;
&lt;span class='lineno'&gt; 10&lt;/span&gt; &lt;span class='cp'&gt;#define _LARGEFILE64_SOURCE&lt;/span&gt;
&lt;span class='lineno'&gt; 11&lt;/span&gt; &lt;span class='cp'&gt;#endif&lt;/span&gt;
&lt;span class='lineno'&gt; 12&lt;/span&gt; 
&lt;span class='lineno'&gt; 13&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 14&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 15&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;signal.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 16&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 17&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/ipc.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 18&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/shm.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 19&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/sem.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 20&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 21&lt;/span&gt; &lt;span class='cp'&gt;#include&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 22&lt;/span&gt; 
&lt;span class='lineno'&gt; 23&lt;/span&gt; &lt;span class='cm'&gt;/* 共享内存的关键字 */&lt;/span&gt;
&lt;span class='lineno'&gt; 24&lt;/span&gt; &lt;span class='cp'&gt;#define SHMKEY1 (key_t)0x10&lt;/span&gt;
&lt;span class='lineno'&gt; 25&lt;/span&gt; &lt;span class='cp'&gt;#define SHMKEY2 (key_t)0x15&lt;/span&gt;
&lt;span class='lineno'&gt; 26&lt;/span&gt; &lt;span class='cm'&gt;/* 信号量的关键字 */&lt;/span&gt;
&lt;span class='lineno'&gt; 27&lt;/span&gt; &lt;span class='cp'&gt;#define SEMKEY (key_t)0x20&lt;/span&gt;
&lt;span class='lineno'&gt; 28&lt;/span&gt; 
&lt;span class='lineno'&gt; 29&lt;/span&gt; &lt;span class='cm'&gt;/* 读写缓冲区的大小32M */&lt;/span&gt;
&lt;span class='lineno'&gt; 30&lt;/span&gt; &lt;span class='cp'&gt;#define SIZE 33554428&lt;/span&gt;
&lt;span class='lineno'&gt; 31&lt;/span&gt; 
&lt;span class='lineno'&gt; 32&lt;/span&gt; &lt;span class='cm'&gt;/* 缓冲区数据结构 */&lt;/span&gt;
&lt;span class='lineno'&gt; 33&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 34&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;d_nread&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 35&lt;/span&gt;     &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;d_buf&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;SIZE&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 36&lt;/span&gt; &lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='lineno'&gt; 37&lt;/span&gt; 
&lt;span class='lineno'&gt; 38&lt;/span&gt; &lt;span class='cp'&gt;#define IFLAGS (IPC_CREAT|IPC_EXCL)&lt;/span&gt;
&lt;span class='lineno'&gt; 39&lt;/span&gt; &lt;span class='cm'&gt;/* 将-1强制转换为struct databuf*类型，用于shmat执行结果的判断 */&lt;/span&gt;
&lt;span class='lineno'&gt; 40&lt;/span&gt; &lt;span class='cp'&gt;#define ERR ((struct databuf*)-1)&lt;/span&gt;
&lt;span class='lineno'&gt; 41&lt;/span&gt; 
&lt;span class='lineno'&gt; 42&lt;/span&gt; &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;shmid1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;shmid2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 43&lt;/span&gt; 
&lt;span class='lineno'&gt; 44&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;mes&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 45&lt;/span&gt;     &lt;span class='n'&gt;perror&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;mes&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 46&lt;/span&gt;     &lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 47&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 48&lt;/span&gt; &lt;span class='cm'&gt;/* 对共享存储器段的初始化 */&lt;/span&gt;
&lt;span class='lineno'&gt; 49&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;getseg&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;p1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;p2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 50&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;shmid1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;shmget&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SHMKEY1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='mo'&gt;0600&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;IFLAGS&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 51&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;shmget&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 52&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 53&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;shmid2&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;shmget&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SHMKEY2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;sizeof&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='mo'&gt;0600&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;IFLAGS&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 54&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;shmget&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 55&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 56&lt;/span&gt; 
&lt;span class='lineno'&gt; 57&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;shmat&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;shmid1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;ERR&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 58&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;shmat&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 59&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p2&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;shmat&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;shmid2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;ERR&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 60&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;shmat&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 61&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 62&lt;/span&gt; &lt;span class='cm'&gt;/* 对信号量的初始化 */&lt;/span&gt;
&lt;span class='lineno'&gt; 63&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;getsem&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 64&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;semget&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;SEMKEY&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mo'&gt;0600&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;IFLAGS&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 65&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;semget&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 66&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 67&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semctl&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;SETVAL&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 68&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;semctl&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 69&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 70&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semctl&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;SETVAL&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 71&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;semctl&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 72&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 73&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 74&lt;/span&gt; &lt;span class='cm'&gt;/* 程序结束时释放共享内存和信号量*/&lt;/span&gt;
&lt;span class='lineno'&gt; 75&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;removex&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 76&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;shmctl&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;shmid1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;IPC_RMID&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 77&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;shmctl&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 78&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;shmctl&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;shmid2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;IPC_RMID&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 79&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;shmctl&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 80&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semctl&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;IPC_RMID&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 81&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;semctl&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 82&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 83&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 84&lt;/span&gt; &lt;span class='cm'&gt;/* 定义对两个信号量的操作*/&lt;/span&gt;
&lt;span class='lineno'&gt; 85&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;sembuf&lt;/span&gt; &lt;span class='n'&gt;p1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;&lt;span class='n'&gt;p2&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;&lt;span class='n'&gt;v1&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt;&lt;span class='n'&gt;v2&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='lineno'&gt; 86&lt;/span&gt; &lt;span class='cm'&gt;/* 读进程 */&lt;/span&gt;
&lt;span class='lineno'&gt; 87&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;reader&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;filepath&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 88&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;fd&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;filepath&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;O_RDONLY&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;O_LARGEFILE&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 89&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fd&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 90&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 91&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 92&lt;/span&gt;        
&lt;span class='lineno'&gt; 93&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(;;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 94&lt;/span&gt;         &lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_buf&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;SIZE&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 95&lt;/span&gt;         &lt;span class='n'&gt;semop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;v1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 96&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 97&lt;/span&gt;             &lt;span class='k'&gt;return&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    
&lt;span class='lineno'&gt; 98&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 99&lt;/span&gt;         &lt;span class='n'&gt;semop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;p2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;100&lt;/span&gt; 
&lt;span class='lineno'&gt;101&lt;/span&gt;         &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;read&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_buf&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;SIZE&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;102&lt;/span&gt;         &lt;span class='n'&gt;semop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;v2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;103&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;104&lt;/span&gt;             &lt;span class='k'&gt;return&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;105&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;106&lt;/span&gt;         &lt;span class='n'&gt;semop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;p1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;107&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;108&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;109&lt;/span&gt; &lt;span class='cm'&gt;/* 写进程 */&lt;/span&gt;
&lt;span class='lineno'&gt;110&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;writer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;filepath&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;111&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;fd&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;open&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;filepath&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;O_WRONLY&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;O_CREAT&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;O_LARGEFILE&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;S_IREAD&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;S_IWRITE&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;S_IRGRP&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;S_IWGRP&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;S_IROTH&lt;/span&gt;&lt;span class='o'&gt;|&lt;/span&gt;&lt;span class='n'&gt;S_IWOTH&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;112&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fd&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;113&lt;/span&gt;         &lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;114&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;115&lt;/span&gt; 
&lt;span class='lineno'&gt;116&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(;;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;117&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;118&lt;/span&gt;             &lt;span class='k'&gt;return&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;119&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;120&lt;/span&gt;         &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_buf&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;121&lt;/span&gt;         &lt;span class='n'&gt;semop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;v2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;122&lt;/span&gt;         &lt;span class='n'&gt;semop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;p1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;123&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;124&lt;/span&gt;             &lt;span class='k'&gt;return&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;125&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;126&lt;/span&gt;         &lt;span class='n'&gt;write&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;fd&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_buf&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;127&lt;/span&gt;         &lt;span class='n'&gt;semop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;v1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;128&lt;/span&gt;         &lt;span class='n'&gt;semop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;p2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;129&lt;/span&gt; 
&lt;span class='lineno'&gt;130&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;131&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;132&lt;/span&gt; &lt;span class='cm'&gt;/* 主进程 */&lt;/span&gt;
&lt;span class='lineno'&gt;133&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;main&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;argc&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;argv&lt;/span&gt;&lt;span class='p'&gt;[])&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;134&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;pid&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;135&lt;/span&gt;     &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;databuf&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;136&lt;/span&gt;     &lt;span class='n'&gt;getsem&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;137&lt;/span&gt; 
&lt;span class='lineno'&gt;138&lt;/span&gt;     &lt;span class='n'&gt;getseg&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;139&lt;/span&gt;     &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;d_nread&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//使写进程在第一次无法将buf2中数据写入文件&lt;/span&gt;
&lt;span class='lineno'&gt;140&lt;/span&gt;     &lt;span class='k'&gt;switch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;pid&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;fork&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;141&lt;/span&gt;         &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;:&lt;span class='n'&gt;fatal&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;fork&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;142&lt;/span&gt;         &lt;span class='k'&gt;case&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;:&lt;span class='n'&gt;writer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;argv&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;&lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;143&lt;/span&gt;         &lt;span class='nl'&gt;default:&lt;/span&gt;&lt;span class='n'&gt;reader&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;semid&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;buf2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;argv&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt;144&lt;/span&gt;                 &lt;span class='n'&gt;removex&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;145&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;146&lt;/span&gt;     &lt;span class='n'&gt;exit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;147&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在测试时，发现无法读入超过2G的文件，google了下，原来32位系统C程序要打开超过2G的文件，需要一些方法：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;方法一：同上面代码一样，在程序中添加宏定义，以及在打开文件时，加上O_LARGEFILE，之后使用gcc直接编译；&lt;/li&gt;

&lt;li&gt;方法二：在gcc编译时加上一些参数：gcc -o shmcopy2 shmcopy2.c -D_FILE_OFFSET_BITS=64。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;测试使用的是一个2.8G的文件，结果是性能和cp命令差不多。&lt;/p&gt;</description>
                <link>http://yangxikun.github.io/C/2013/11/08/shmcopy</link>
                <guid>http://yangxikun.github.io/C/2013/11/08/shmcopy</guid>
                <pubDate>2013-11-08T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>依赖注入模式</title>
                <description>&lt;h3 id='id90'&gt;什么是依赖注入模式？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;控制反转（Inversion of Control，英文缩写为IoC）是一个重要的面向对象编程的法则来削减计算机程序的耦合问题。 控制反转还有一个名字叫做依赖注入（Dependency Injection）。简称DI。许多功能都是由两个或是更多的类通过彼此的合作来实现业务逻辑，这使得每个对象都需要，与其合作的对象（也就是它所依赖的对象）的引用。如果这个获取过程要靠自身实现，那么如你所见，这将导致代码高度耦合并且难以测试。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href='http://fabien.potencier.org/article/11/what-is-dependency-injection#'&gt;What is Dependency Injection?&lt;/a&gt;这篇文章讲得很好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;在此对上面那篇文章进行翻译和整理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;为了克服HTTP协议的无状态性，web应用程序需要一种方法在请求之间存储用户信息。使用cookie来完成确实简单。这里使用PHP内建的session机制。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;假设我们现在有一个用户类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;User&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;protected&lt;/span&gt; &lt;span class='nv'&gt;$storage&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; 
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;storage&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;SessionStorage&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;setLanguage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$language&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;storage&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;language&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$language&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; 
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;getLanguage&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;storage&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;language&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; 
&lt;span class='lineno'&gt;21&lt;/span&gt;     &lt;span class='c1'&gt;// ...&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;在应用中使用User类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='nv'&gt;$user&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;User&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='nv'&gt;$user&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;setLanguage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;fr&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='nv'&gt;$user_language&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$user&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;getLanguage&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;当然这些都已经很不错了，直到你想要更灵活实现。如果你想要改变session cookie的名字，该如何做好？这里有几个可行性例子：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;在User类的构造函数中进行设置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;User&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;storage&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;SessionStorage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;SESSION_ID&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='c1'&gt;// ...&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;定义一个外部常量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='nb'&gt;define&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;STORAGE_SESSION_NAME&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;SESSION_ID&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; 
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;User&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;storage&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;SessionStorage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;STORAGE_SESSION_NAME&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='c1'&gt;// ...&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;作为User类构造函数的参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;User&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$sessionName&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;storage&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;SessionStorage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$sessionName&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;  
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='c1'&gt;// ...&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;  
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='nv'&gt;$user&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;User&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;SESSION_ID&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;所有的这些硬编码方法都显得有些鸡肋（对于灵活性而言）。在User类中设置session name无法真正解决问题，当你当你想改变session name的时候不得不去修改User类。使用常量，使得User类依赖于一个被设置的常量。使用构造函数的参数又显得不对劲，因为User类的构造函数的参数就不是与对象本身相关的了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当我们想修改session的存储方式时，如果继续在User类上进行属性或方法的添加，那User类就会显得很臃肿。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;假设我们有一个SessionStorage类，用于实现session机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;SessionStorage&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$cookieName&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;PHP_SESS_ID&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='nb'&gt;session_name&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$cookieName&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='nb'&gt;session_start&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; 
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;set&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$key&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;         &lt;span class='nv'&gt;$_SESSION&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$key&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; 
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$key&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nv'&gt;$_SESSION&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$key&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; 
&lt;span class='lineno'&gt;20&lt;/span&gt;     &lt;span class='c1'&gt;// ...&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;应用依赖注入的思想，可降低程序的耦合度，将SessionStorage类作为User类的依赖，将关于session的事情交由SessionStorage类处理。这样不管是设置session name还是session的存储方式，都不会修改的User类。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;以下是几种依赖注入方式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Constructor Injection:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;User&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$storage&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;storage&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$storage&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='c1'&gt;// ...&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Setter Injection:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;User&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;setSessionStorage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$storage&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;storage&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$storage&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='c1'&gt;// ...&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Property Injection:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;User&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='nv'&gt;$sessionStorage&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt;  
&lt;span class='lineno'&gt;7&lt;/span&gt; &lt;span class='nv'&gt;$user&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;sessionStorage&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$storage&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/10/25/dependency-injection-pattern</link>
                <guid>http://yangxikun.github.io/PHP/2013/10/25/dependency-injection-pattern</guid>
                <pubDate>2013-10-25T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>动态规划--0-1背包问题</title>
                <description>&lt;h3 id='01'&gt;0-1背包问题&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;给定n中物品和一背包。物品i的重量是wi，其价值为vi，背包的容量为c。应如何选择装入背包中的物品，使得装入背包中物品的总价值最大？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id86'&gt;定义数据结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;给定&lt;img alt='dynamic1' src='/assets/img/201310220101.png' /&gt;，要求找出一个n元0-1向量&lt;img alt='dynamic1' src='/assets/img/201310220102.png' /&gt;，使得&lt;img alt='dynamic1' src='/assets/img/201310220103.png' /&gt;，而且&lt;img alt='dynamic1' src='/assets/img/201310220104.png' /&gt;达到最大值。即求:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt='dynamic1' src='/assets/img/201310220105.png' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt='dynamic1' src='/assets/img/201310220106.png' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='id87'&gt;最优子结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;设&lt;code&gt;(y1,y2,...,yn)&lt;/code&gt;是所给0-1背包问题的一个最优解，则&lt;code&gt;(y2,y3,...,yn)&lt;/code&gt;是下面所给相应子问题的一个最优解:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt='dynamic1' src='/assets/img/201310220107.png' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt='dynamic1' src='/assets/img/201310220108.png' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;若不然,设&lt;code&gt;(z2,z3,...,zn)&lt;/code&gt;是上述子问题的一个最优解,而&lt;code&gt;(y2,y3,...,yn)&lt;/code&gt;不是它的最优解.由此可知,&lt;img alt='dynamic1' src='/assets/img/201310220109.png' /&gt;且&lt;img alt='dynamic1' src='/assets/img/201310220110.png' /&gt;.因此&lt;img alt='dynamic1' src='/assets/img/201310220111.png' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;这说明&lt;code&gt;(y1,z2,...zn)&lt;/code&gt;是所给0-1背包问题的一个更优解,从而&lt;code&gt;(y1,y2,...,yn)&lt;/code&gt;不是所给0-1背包问题的最优解,与假设矛盾.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id88'&gt;递归关系&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;设所给0-1背包问题的子问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt='dynamic1' src='/assets/img/201310220112.png' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt='dynamic1' src='/assets/img/201310220113.png' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;的最优值为&lt;code&gt;m(i,j)&lt;/code&gt;,即&lt;code&gt;m(i,j)&lt;/code&gt;是背包容量为j,可选择物品为i,i+1,&amp;#8230;,n时0-1背包问题的最优值.由0-1背包问题的最优子结构性质,可以建立计算&lt;code&gt;m(i,j)&lt;/code&gt;的递归式如下:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt='dynamic1' src='/assets/img/201310220114.png' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='id89'&gt;算法代码&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;Knapsack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;jMax&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;jMax&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='n'&gt;jMax&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;jMax&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;max&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;max&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; 
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;TrackBack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;             &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;         &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;             &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
&lt;span class='lineno'&gt;19&lt;/span&gt;             &lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='o'&gt;-=&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;         &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/10/19/dynamic-plannig-4</link>
                <guid>http://yangxikun.github.io/算法/2013/10/19/dynamic-plannig-4</guid>
                <pubDate>2013-10-19T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>动态规划--最大子段和问题与最大子矩阵和问题</title>
                <description>&lt;blockquote&gt;
&lt;p&gt;最大子段和:给定由n个整数组成的序列a1,a2,&amp;#8230;,an,求该序列形如ai+&amp;#8230;+aj的子段和的最大值.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;算法是基于数据结构的,定义了好的数据结构才能更好的求解问题.所以先定义数据结构:&lt;code&gt;b[j]=max{ai+...+aj}&lt;/code&gt;其中&lt;code&gt;1&amp;lt;=i&amp;lt;=j&amp;lt;=n&lt;/code&gt;,表示b&lt;span&gt;j&lt;/span&gt;是以a&lt;span&gt;j&lt;/span&gt;为结尾的子段所能达到的最大值.在求解出b&lt;span&gt;1&lt;/span&gt;,b&lt;span&gt;2&lt;/span&gt;,&amp;#8230;,b&lt;span&gt;n&lt;/span&gt;之后,从b&lt;span&gt;1&amp;#8230;n&lt;/span&gt;中求出一个最大的值就可以得到原问题的最优解.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id83'&gt;分析最优子结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;上面已经定义了数据结构,接着就要证明其是否具有最优子结构性质,这里我们所证明的最优子结构是指以a&lt;span&gt;k&lt;/span&gt;为结尾的子段所能达到的最大值,虽然与原问题的最优解不一样,但我们却可以从这个最优子结构中得出原问题的解,所以在动态规划算法中,最优子结构并不是依据原问题的最优解而设定,应该是根据定义的数据结构,但又得确保最后能归纳出原问题的最优解.反证法:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当&lt;code&gt;b[j-1]&amp;gt;0&lt;/code&gt;时,设X为b&lt;span&gt;j&lt;/span&gt;的值,则X-a&lt;span&gt;j&lt;/span&gt;是b&lt;span&gt;j-1&lt;/span&gt;的值,即以a&lt;span&gt;j-1&lt;/span&gt;为结尾的子段所能达到的最大值,否则b&lt;span&gt;j&lt;/span&gt;的值将大于X.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当&lt;code&gt;b[j-1]&amp;lt;=0&lt;/code&gt;时,b&lt;span&gt;j&lt;/span&gt; = a&lt;span&gt;j&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;b&lt;span&gt;j&lt;/span&gt;的子问题就是a&lt;span&gt;1&amp;#8230;j&lt;/span&gt;的所有子段,显然由上面两种情况,可以得出b&lt;span&gt;j&lt;/span&gt;确实包含了它的子问题的最优解.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id84'&gt;建立递归关系&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;由最优子结构的分析可得:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;b[j] = max{ai+...+aj} = max{b[j-1]+a[j], a[j]}&lt;/code&gt;,进一步分析可得&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当&lt;code&gt;b[j-1]&amp;gt;0&lt;/code&gt;时,&lt;code&gt;b[j] = a[j] + b[j-1]&lt;/code&gt;;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当&lt;code&gt;b[j-1]&amp;lt;=0&lt;/code&gt;时,&lt;code&gt;b[j]=a[j]&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id85'&gt;算法代码&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;MaxSum&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;sum&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;&lt;span class='c1'&gt;//这段判断语句相当于&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;         &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;&lt;span class='c1'&gt;//max{b[j-1]+a[j], a[j]}&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;sum&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;sum&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;sum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;最大子矩阵和问题是最大子段和问题推广到高维的情形&lt;em&gt;(对我来说真的有点难度&amp;#8230;)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;给定一个m行n列的整数矩阵A,试求A的一个子矩阵,使其各元素之和为最大.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;定义数据结构:设子矩阵的左上角和右下角行列坐标分别为(i1,j1)和(i2,j2),则此子矩阵的和为&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='dynamic3' src='/assets/img/2013100601.gif' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;最大子矩阵和问题的最优解为&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='dynamic3' src='/assets/img/2013100602.gif' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果直接穷举的话,需要&lt;img alt='dynamic3' src='/assets/img/2013100607.gif' /&gt;时间.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;对最优值公式进行变换:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='dynamic3' src='/assets/img/2013100603.gif' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;式中,&lt;img alt='dynamic3' src='/assets/img/2013100604.gif' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;设&lt;img alt='dynamic3' src='/assets/img/2013100605.gif' /&gt;,则&lt;img alt='dynamic3' src='/assets/img/2013100606.gif' /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;可以看出,这是一维情形的最大子段和问题&lt;em&gt;(想到这步,没有解题经验谈何容易&amp;#8230;)&lt;/em&gt;,由此,借助于最大子段和问题的动态规划算法MaxSum,可设计出解最大子矩阵和问题的动态规划算法MaxSum2如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;MaxSum2&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;sum&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//相当于i1&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//相当于i2&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;             &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;&lt;span class='c1'&gt;//注意这里是累加,相当于公式b[j] = a[i1][j]+...+a[i2][j]&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;             &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;max&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;MaxSum&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//max相当于得到一个t(i1,i2)的值&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;max&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;sum&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;sum&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;max&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//这一步相当于max t(i1, i2) 1&amp;lt;=i1&amp;lt;=i2&amp;lt;=m&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;sum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/10/06/dynamic-planning-3</link>
                <guid>http://yangxikun.github.io/算法/2013/10/06/dynamic-planning-3</guid>
                <pubDate>2013-10-06T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>动态规划--最长公共子序列</title>
                <description>&lt;blockquote&gt;
&lt;p&gt;子序列:在此定义为一段给定序列中按顺序出现的字符序列,为原序列的子序列.例如:序列{A,B,C}的子序列可以是{A,C}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;最长公共子序列:给定两个序列,找出它们的公共子序列.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id80'&gt;分析最优子结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;设序列X={x1,x2,&amp;#8230;,xm}和Y={y1,y2,&amp;#8230;,ym}的最长公共子序列为Z={z1,z2,&amp;#8230;,zk},则&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;若xm=yn,则zk=xm=yn,且Zk-1是Xm-1和Yn-1的最长公共子序列&lt;/li&gt;

&lt;li&gt;若xm!=yn且zk!=xm,则Z是Xm-1和Y的最长公共子序列&lt;/li&gt;

&lt;li&gt;若xm!=yn且zk!=yn,则Z是X和Yn-1的最长公共子序列&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;其中,Xm-1={x1,x2,&amp;#8230;,xm-1};Yn-1={y1,y2,&amp;#8230;,yn-1};Zk-1={z1,z2,&amp;#8230;,zk-1}.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;用反证法证明上文1的结论:若zk!=xm,则{z1,z2,&amp;#8230;,zk,xm}是X和Y的长度为k+1的公共子序列.这与Z是X和Y的最长公共子序列矛盾.所以zk=xm=yn,由此可知Zk-1是Xm-1和Yn-1的长度为k-1的最长公共子序列.上文2和3的结论也可以用反正法证明.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id81'&gt;建立递归关系&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;设c[i][j]记录序列Xi和Yj的最长公共子序列的长度.其中,Xi={x1,x2,&amp;#8230;,xi};Yj={y1,y2,&amp;#8230;,yj}.由最优子结构可得:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;c[i][j] = 0 i=0,j=0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;c[i][j] = c[i-1][j-1]+1 i,j&amp;gt;0,xi=yj&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;c[i][j] = max{c[i][j-1],c[i-1][j]} i,j&amp;gt;0,xi!=yj&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='id82'&gt;算法代码&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;LCSLength&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;cha&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;             &lt;span class='c1'&gt;//b[i][j]用于记录zk的位置,为1时表示当前就是,为2表示在Xi-1和Yj中,为3表示在Xi和Yj-1中&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;}&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;             &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; 
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;LCS&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;LCS&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;];}&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;LCS&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;);}&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='n'&gt;LCS&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/10/04/dynamic-planning-2</link>
                <guid>http://yangxikun.github.io/算法/2013/10/04/dynamic-planning-2</guid>
                <pubDate>2013-10-04T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>正则表达式小结</title>
                <description>&lt;style&gt;
    tr,td {
        border: 1px solid black
    }
&lt;/style&gt;
&lt;h3 id='id71'&gt;分隔符&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;当使用 PCRE 函数的时候，模式需要由分隔符闭合包裹。分隔符可以使任意非字母数字、非反斜线、非空白字符。经常使用的分隔符是正斜线(/)、hash符号(#) 以及取反符号(~)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id72'&gt;元字符&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;元字符是正则表达式中具有特殊意义的专用字符,用来规定其前导字符在目标对象中的出现模式.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;共有两种不同的元字符：一种是可以在模式中方括号外任何地方使用的，另外一种 是需要在方括号内使用的。(元字符列表)&lt;span&gt;http://www.php.net/manual/zh/regexp.reference.meta.php&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id73'&gt;字符组&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;使用中括号的字符集称为字符组.例如&lt;code&gt;[c[aou?*)]]t&lt;/code&gt;,注意字符组里的元字符可以不转义.在字符组中要使用&lt;code&gt;\&lt;/code&gt;时,在其前面要多加&lt;code&gt;\\&lt;/code&gt;两个斜线.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id74'&gt;分支&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在圆括号中使用|进行分支.例如:&lt;code&gt;(c|h|to)at&lt;/code&gt;,可以匹配&lt;code&gt;cat&lt;/code&gt;,&lt;code&gt;hat&lt;/code&gt;,&lt;code&gt;toat&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id75'&gt;分组&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;通过圆括号分隔界定，并且它们可以嵌套.常用分组语法:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table cellspacing='0'&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;分类&lt;/td&gt;
&lt;td&gt;代码/语法&lt;/td&gt;
&lt;td&gt;说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td rowspan='3'&gt;捕获&lt;/td&gt;
&lt;td&gt;(exp)&lt;/td&gt;
&lt;td&gt;匹配exp,并捕获文本到自动命名的组里&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?&amp;lt;name&amp;gt;exp)&lt;/td&gt;
&lt;td&gt;匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?:exp)&lt;/td&gt;
&lt;td&gt;匹配exp,不捕获匹配的文本，也不给此分组分配组号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td rowspan='4'&gt;断言&lt;/td&gt;
&lt;td&gt;(?=exp)&lt;/td&gt;
&lt;td&gt;匹配exp前面的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?&amp;lt;=exp)&lt;/td&gt;
&lt;td&gt;匹配exp后面的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?!exp)&lt;/td&gt;
&lt;td&gt;匹配后面跟的不是exp的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?&amp;lt;!exp)&lt;/td&gt;
&lt;td&gt;匹配前面不是exp的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td rowspan='1'&gt;注释&lt;/td&gt;
&lt;td&gt;(?#comment)&lt;/td&gt;
&lt;td&gt;这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看看这篇博文:&lt;a href='http://www.anrip.com/post/1126'&gt;正则表达式 – 分组语法（捕获/断言/注释）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id76'&gt;反向引用&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;注意它不仅可以用在pattern中,还可以用在replacement中,例如:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='nv'&gt;$str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;\*?123&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='nv'&gt;$str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;preg_replace&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;~[\\\*?]+(\d+)~&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;\1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$str&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='nb'&gt;var_dump&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$str&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id77'&gt;贪婪/懒惰匹配模式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在重复量词之后加个?就形成了懒惰模式,例如:&lt;code&gt;a.*b&lt;/code&gt;匹配&lt;code&gt;aabab&lt;/code&gt;整个字符串,而&lt;code&gt;a.*?b&lt;/code&gt;匹配&lt;code&gt;aabab&lt;/code&gt;的&lt;code&gt;aab&lt;/code&gt;和&lt;code&gt;ab&lt;/code&gt;两组字符.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id78'&gt;常用的模式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;忽略大小写模式(i)&lt;/li&gt;

&lt;li&gt;多行模式(m)&lt;/li&gt;

&lt;li&gt;点号通配模式(s),即点号可以匹配换行符&lt;/li&gt;

&lt;li&gt;懒惰模式(U),相当于重复量词之后加了个?&lt;/li&gt;

&lt;li&gt;支持UTF-8转义表达(u)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='nv'&gt;$str&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;你好世界&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='nb'&gt;preg_match&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;~[\x{4e00}-\x{9fa5}]+~u&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$str&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$matches&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='nb'&gt;var_dump&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$matches&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id79'&gt;正则表达式的效率与优化&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用字符组会比分支条件快一点&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;尽量使用与匹配字符相同类型的元字符&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;匹配字符数目确定的就不用任意多量词&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;尽量使用字符串处理函数代替正则&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;合理使用括号,每使用一个普通括号,而不是非捕获型括号&lt;code&gt;(?:)&lt;/code&gt;,就会保留一部分内存等着再次被访问&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;使用PHP原生函数&lt;a href='http://www.php.net/manual/zh/ref.filter.php'&gt;Filter系列函数&lt;/a&gt;和&lt;a href='http://www.php.net/manual/zh/ref.ctype.php'&gt;ctype函数&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/10/03/regular-expressions</link>
                <guid>http://yangxikun.github.io/PHP/2013/10/03/regular-expressions</guid>
                <pubDate>2013-10-03T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>观察者模式</title>
                <description>&lt;p&gt;&lt;em&gt;学习自《PHP 精粹》&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对于javascript开发者来说,这是一个再熟悉不过的模式了,因为js通过事件驱动来执行,例如页面加载,单击,鼠标移动等.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;观察者模式的核心在于允许你的应用程序注册一个回调,当某个特定的事件发生时便会触发它.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;下面例子通过一个Event类实现观察者模式:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='sd'&gt; * Event 类&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='sd'&gt; * &lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='sd'&gt; * 使用Event类,你可以为某个事件注册回调函数&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Event&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='sd'&gt;     * @static&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='sd'&gt;     * @var array 键值对数组,键作为事件,值是存储事件的回调数组&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;protected&lt;/span&gt; &lt;span class='nv'&gt;$callbacks&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; 
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='sd'&gt;     * 注册一个回调&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='sd'&gt;     * &lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='sd'&gt;     * @param string $eventName 事件的名字&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='sd'&gt;     * @param mixed $callback 回调&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='sd'&gt;     * @return NULL&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; &lt;span class='sd'&gt;     * @throws  Exception&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;registerCallback&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$eventName&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$callback&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nb'&gt;is_callable&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$callback&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;             &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Exception&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Invalid callback&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;         &lt;span class='nv'&gt;$eventName&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;strtolower&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$eventName&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;         &lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$callbacks&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$eventName&lt;/span&gt;&lt;span class='p'&gt;][]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$callback&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt; 
&lt;span class='lineno'&gt;31&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt; &lt;span class='sd'&gt;     * 触发一个事件&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt; &lt;span class='sd'&gt;     * &lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt; &lt;span class='sd'&gt;     * @param string $eventName 事件名称&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt; &lt;span class='sd'&gt;     * @param mixed $data 传递给回调函数的数据&lt;/span&gt;
&lt;span class='lineno'&gt;36&lt;/span&gt; &lt;span class='sd'&gt;     * @return NULL&lt;/span&gt;
&lt;span class='lineno'&gt;37&lt;/span&gt; &lt;span class='sd'&gt;     * @throws  Exception&lt;/span&gt;
&lt;span class='lineno'&gt;38&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;39&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;trigger&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$eventName&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$data&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;40&lt;/span&gt;         &lt;span class='nv'&gt;$eventName&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;strtolower&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$eventName&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;41&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;isset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$callbacks&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$eventName&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;42&lt;/span&gt;             &lt;span class='k'&gt;foreach&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$callbacks&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$eventName&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='nv'&gt;$key&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;$callback&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;43&lt;/span&gt;                 &lt;span class='nv'&gt;$callback&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$data&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;44&lt;/span&gt;             &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;45&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;46&lt;/span&gt;             &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Exception&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Invalid event&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;47&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;48&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;49&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;50&lt;/span&gt; 
&lt;span class='lineno'&gt;51&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;52&lt;/span&gt; &lt;span class='sd'&gt; * log回调&lt;/span&gt;
&lt;span class='lineno'&gt;53&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt;54&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;LogCallback&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;55&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__invoke&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$data&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;56&lt;/span&gt;         &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Log data&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;57&lt;/span&gt;         &lt;span class='nb'&gt;var_dump&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$data&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;58&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;59&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;60&lt;/span&gt; 
&lt;span class='lineno'&gt;61&lt;/span&gt; &lt;span class='c1'&gt;//注册回调&lt;/span&gt;
&lt;span class='lineno'&gt;62&lt;/span&gt; &lt;span class='nx'&gt;Event&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='na'&gt;registerCallback&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;save&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;LogCallback&lt;/span&gt;&lt;span class='p'&gt;());&lt;/span&gt;
&lt;span class='lineno'&gt;63&lt;/span&gt; &lt;span class='c1'&gt;//注册一个闭包&lt;/span&gt;
&lt;span class='lineno'&gt;64&lt;/span&gt; &lt;span class='nx'&gt;Event&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='na'&gt;registerCallback&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;save&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$data&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;65&lt;/span&gt;                                     &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Clear Cache&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;66&lt;/span&gt;                                     &lt;span class='nb'&gt;var_dump&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$data&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;67&lt;/span&gt;                                 &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;68&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;DataRecord&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;69&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;save&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//触发事件&lt;/span&gt;
&lt;span class='lineno'&gt;70&lt;/span&gt;         &lt;span class='nx'&gt;Event&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='na'&gt;trigger&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;save&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;
&lt;span class='lineno'&gt;71&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;72&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;73&lt;/span&gt; 
&lt;span class='lineno'&gt;74&lt;/span&gt; &lt;span class='nv'&gt;$data&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;DataRecord&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;75&lt;/span&gt; &lt;span class='nv'&gt;$data&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;save&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;76&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/10/02/observer-pattern</link>
                <guid>http://yangxikun.github.io/PHP/2013/10/02/observer-pattern</guid>
                <pubDate>2013-10-02T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>迭代模式</title>
                <description>&lt;p&gt;&lt;em&gt;学习自《Guide to PHP Design Patterns》&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在PHP的SPL中,有iterator这个类库,它的主要用途在于为一组数据集(可以是数组或对象)提供各种遍历的方法.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id70'&gt;一个简单的迭代&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;testIterator&lt;/span&gt; &lt;span class='k'&gt;implements&lt;/span&gt; &lt;span class='nx'&gt;iterator&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;private&lt;/span&gt; &lt;span class='nv'&gt;$_store&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//存储数据的集合&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; 
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nv'&gt;$arr&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;_store&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$arr&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;current&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nb'&gt;current&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;_store&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; 
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;next&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='nb'&gt;next&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;_store&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; 
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;key&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nb'&gt;key&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;_store&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; 
&lt;span class='lineno'&gt;21&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;rewind&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;         &lt;span class='nb'&gt;reset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;_store&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt; 
&lt;span class='lineno'&gt;25&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;valid&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//在next()和rewind()调用之后会被自动调用&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt; &lt;span class='nv'&gt;$arr&lt;/span&gt;         &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;false&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt; &lt;span class='nv'&gt;$arrIterator&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;testIterator&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$arr&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt; &lt;span class='k'&gt;foreach&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$arr&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='nv'&gt;$key&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt;     &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nv'&gt;$key&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;迭代的类库有各种迭代的接口,这也是为了规范开发者编写的代码吧,具体请看PHP手册&lt;a href='http://cn2.php.net/manual/en/class.iterator.php'&gt;iterator&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/10/02/iterator-pattern</link>
                <guid>http://yangxikun.github.io/PHP/2013/10/02/iterator-pattern</guid>
                <pubDate>2013-10-02T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>递归与分治--合并排序</title>
                <description>&lt;h3 id='id69'&gt;思想&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;将待排序元素分成大小大致相同的两个子集合,分别对两个子集合进行排序,最终将排好序的子集合合并成所要求的排好序的集合.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;递归的归并排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;MergeSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;left&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;right&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;left&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;right&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//至少要有2个元素&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;         &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;left&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;right&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;         &lt;span class='n'&gt;MergeSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;left&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//左半部分进行归并排序&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;         &lt;span class='n'&gt;MergeSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;right&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//右半部分进行归并排序&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt;         &lt;span class='n'&gt;Merge&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;left&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;right&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//将a[left...i]和a[i+1...right]合并到辅助数组b中&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt;         &lt;span class='n'&gt;Copy&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;left&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;right&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//因为归并排序不是原址排序,所以要复制回数组a&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;归并排序非递归实现&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;需要设置一个归并的步长,起始为1,到n/2结束&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;MergeSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='n'&gt;Type&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//增长步长,每次都以自身两倍增长&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='n'&gt;MergePass&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//归并到数组b中&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='n'&gt;MergePass&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//归并到数组a中&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; 
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;MergePass&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='c1'&gt;//对数组x合并n/s个大小为s的相邻子数组到数组y中&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;         &lt;span class='n'&gt;Merge&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//合并大小为s的相邻两段子数组&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;         &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='c1'&gt;//剩下的元素个数少于2s&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;Merge&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;x&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;y&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;x&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt; 
&lt;span class='lineno'&gt;24&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;Merge&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;     &lt;span class='c1'&gt;//合并c[l:m]和c[m+1:r]到d[l:r]&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;l&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;         &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;d&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/10/01/recursive-divide-4</link>
                <guid>http://yangxikun.github.io/算法/2013/10/01/recursive-divide-4</guid>
                <pubDate>2013-10-01T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>动态规划--矩阵连乘问题</title>
                <description>&lt;h3 id='id65'&gt;问题描述&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;给定n个矩阵{A1,A2,&amp;#8230;,An},其中Ai与Ai+1是可乘的,i=1,2,&amp;#8230;,n-1.求使用矩阵结合律使n个矩阵的连乘积需要的数乘次数最少.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;由于矩阵乘法满足结合律,故计算矩阵的连乘积可以有许多不同的计算次序.这种计算次序可以用加括号的方式来确定.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;完全加括号的矩阵连乘积可递归地定义为: 1.单个矩阵时完全加括号的; 2.矩阵连乘积A是完全加括号的,则A可表示为2个完全加括号的矩阵连乘积B和C的乘积并加括号,即A=(BC);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;例如,矩阵连乘积A1A2A3A4可以有以下几种不同的完全加括号方式:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;(A1(A2(A3A4))),(A1((A2A3)A4)),((A1A2)(A3A4))等,不同完全加括号的连乘积所需的数乘次数不同,我们要求的就是数乘次数最少的完全加括号方式.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id66'&gt;分析最优子结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在递归分治中,我们不需要对问题分析最优子结构,因为递归分治不是用于求最优解的,它是将原问题划分为子问题,逐个求解出子问题后合并为原问题的解.而动态规划用于求解问题的最优解,所以需要对问题的最优子结构进行分析,且动态规划每个子问题的解并不是一起合并为原问题的解,而是从子问题的解中挑选出合适的解得出父问题的解.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;最优子结构是指原问题的最优解包含着其子问题的最优解,例如:假设(A1(A2(A3A4)))是矩阵连乘积A1A2A3A4的最优解,那么A2(A3A4)是其子问题矩阵连乘积A2A3A4的最优解.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;要使用动态规划算法求解问题,就必须先证明原问题具有最优子结构性质,因为只有符合这个性质,原问题的最优解才可以从子问题的最优解中得出.这和递归分治类似,都是自底向上的求解方式,从子问题的解得出原问题的解.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;证明矩阵连乘积问题具有最优子结构:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;将矩阵连乘积AiAi+1&amp;#8230;Aj简记为A[i:j].考擦计算A[1:n]的最优计算次序.设这个计算次序在矩阵Ak和Ak+1之间将矩阵链断开,&lt;code&gt;1&amp;lt;=k&amp;lt;n&lt;/code&gt;,则其相应的完全加括号方式为((A1&amp;#8230;Ak)(Ak+1&amp;#8230;An)).依此次序,先计算A[1:k]和A[k+1:n],然后将计算结果相乘得到A[1:n],依此计算顺序总计算量为A[1:k]的计算量加上A[k+1:n]的计算量,再加上A[1:k]和A[k+1:n]相乘的计算量.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;问题的关键点在于:计算A[1:n]的最优次序所包含的计算矩阵子链A[1:k]和A[k+1:n]的次序也是最优的,即原问题具有最优子结构性质.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;反证法证明:如果存在一个计算A[1:k]的次序需要的计算量更少,则用此次序替换原来的次序,得到的计算A[1:n]的计算量将比最优次序所需计算量更少,这是一个矛盾.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='id67'&gt;建立递归关系&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;这是这几动态规划的第二步.设计算A[i:j],&lt;code&gt;1&amp;lt;=i&amp;lt;=j&amp;lt;=n&lt;/code&gt;,所需的最少数乘次数为m[i][j],则原问题的最优值为m[1][n].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当&lt;code&gt;i=j&lt;/code&gt;时,A[i:j]=Ai为单一矩阵,所以m[i][i]=0,i=1,2,&amp;#8230;,n;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当&lt;code&gt;i&amp;lt;j&lt;/code&gt;时,可利用最优子结构性质来计算m[i][j].事实上,若计算A[i:j]的最优次序在Ak和Ak+1之间断开,&lt;code&gt;i&amp;lt;=k&amp;lt;j&lt;/code&gt;,则m[i][j]=m[i][k]+m[k+1][j]+Pi-1PkPj &lt;code&gt;i&amp;lt;=k&amp;lt;j&lt;/code&gt;.因此,k时这j-i个位置中使计算量达到最小的那个位置.从而m[i][j]可以递归地定义为&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;m[i][j] = 0 &lt;code&gt;i = j&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;m[i][j] = min{m[i][k]+m[k+1][j]+Pi-1PkPj} &lt;code&gt;i &amp;lt; j&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Pi-1PkPj是指数组Pi-1Pk和PkPj相乘所需计算量.用s[i][j]记录k可得出最优值m[i][j]的断开点,并可递归地由s[i][j]构造出相应的最优解.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id68'&gt;算法代码&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;MatrixChain&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='c1'&gt;//m[i][j]记录A[i:j]最少计算量的值,s[i][j]记录断开点&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='c1'&gt;//步长控制&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;             &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;             &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;             &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;                 &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;                 &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;;}&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;             &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; 
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;TraceBack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='c1'&gt;//根据s数组,递归求A[i:j]的最优解&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='n'&gt;TraceBack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;     &lt;span class='n'&gt;TraceBack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;     &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Multiply A&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;     &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='s'&gt;&amp;quot; and A&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;如果连矩阵乘积为A1A2A3A4A5,则代码执行时,计算子矩阵链顺序为:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;m[1][2],m[2][3],m[3][4],m[4][5]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;m[1][3],m[2][4],m[3][5]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;m[1][4],m[2][5]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;m[1][5]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/10/01/dynamic-planning-1</link>
                <guid>http://yangxikun.github.io/算法/2013/10/01/dynamic-planning-1</guid>
                <pubDate>2013-10-01T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>注册表模式</title>
                <description>&lt;p&gt;&lt;em&gt;学习自《Guide to PHP Design Patterns》&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='id63'&gt;注册表模式&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;注册表模式用于访问全局可重用的对象,可以容纳多个类的多个实例.这些类的实例一般都是经常被调用到或当做参数传递的.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;基本的注册表模式用于保持全局存储,需要以下4种实现方法:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Register::add()添加一个对象到注册表中,可以指定一个名称(一个类的多个实例)或者使用默认的类名(类似单例)&lt;/li&gt;

&lt;li&gt;Register::get()从注册表中检索一个对象&lt;/li&gt;

&lt;li&gt;Register::contains()在注册表中检查一个对象是否存在&lt;/li&gt;

&lt;li&gt;Register::remove()通过对象名在注册表中删除一个对象&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id64'&gt;实例代码:&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='sd'&gt; * 注册表类&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Register&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; 
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='sd'&gt;     * @static&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='sd'&gt;     * @var array 存储实例&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;private&lt;/span&gt; &lt;span class='nv'&gt;$_store&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; 
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='sd'&gt;     * 添加一个对象到注册表中,可以指定一个名称(一个类的多个实例)或者使用默认的类名(类似单例)&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='sd'&gt;     * &lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='sd'&gt;     * @param mixed $object 被存储的对象&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='sd'&gt;     * @param string $name 用于检索对象的名字&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='sd'&gt;     * @return mixed 如果重写了实例,那么之前的实例会被返回&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$object&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$name&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;null&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;         &lt;span class='nv'&gt;$name&lt;/span&gt;   &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$name&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='k'&gt;null&lt;/span&gt; &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nb'&gt;get_class&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$object&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;         &lt;span class='nv'&gt;$name&lt;/span&gt;   &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;strtolower&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;         &lt;span class='nv'&gt;$return&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;null&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;isset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_store&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;             &lt;span class='nv'&gt;$return&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_store&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;         &lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_store&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$object&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nv'&gt;$return&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt; 
&lt;span class='lineno'&gt;31&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt; &lt;span class='sd'&gt;     * 从注册表中检索一个对象&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt; &lt;span class='sd'&gt;     * &lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt; &lt;span class='sd'&gt;     * @param string $name 对象名字,{@see self::add()}&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt; &lt;span class='sd'&gt;     * @return mixed&lt;/span&gt;
&lt;span class='lineno'&gt;36&lt;/span&gt; &lt;span class='sd'&gt;     * @throws Exception&lt;/span&gt;
&lt;span class='lineno'&gt;37&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;38&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;39&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='na'&gt;contains&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;40&lt;/span&gt;             &lt;span class='k'&gt;throw&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Exception&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;对象没有存储在注册表中&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;41&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;42&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_store&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;43&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;44&lt;/span&gt; 
&lt;span class='lineno'&gt;45&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;46&lt;/span&gt; &lt;span class='sd'&gt;     * 在注册表中检查一个对象是否存在&lt;/span&gt;
&lt;span class='lineno'&gt;47&lt;/span&gt; &lt;span class='sd'&gt;     * &lt;/span&gt;
&lt;span class='lineno'&gt;48&lt;/span&gt; &lt;span class='sd'&gt;     * @param string $name 对象名称,{@see self::add()}&lt;/span&gt;
&lt;span class='lineno'&gt;49&lt;/span&gt; &lt;span class='sd'&gt;     * @return bool&lt;/span&gt;
&lt;span class='lineno'&gt;50&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;51&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;contains&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;52&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;53&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;isset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_store&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;54&lt;/span&gt;             &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;55&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;56&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;57&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;58&lt;/span&gt; 
&lt;span class='lineno'&gt;59&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;60&lt;/span&gt; &lt;span class='sd'&gt;     * 通过对象名在注册表中删除一个对象&lt;/span&gt;
&lt;span class='lineno'&gt;61&lt;/span&gt; &lt;span class='sd'&gt;     * &lt;/span&gt;
&lt;span class='lineno'&gt;62&lt;/span&gt; &lt;span class='sd'&gt;     * @param string $name 对象名称,{@see self::add()}&lt;/span&gt;
&lt;span class='lineno'&gt;63&lt;/span&gt; &lt;span class='sd'&gt;     * @return void&lt;/span&gt;
&lt;span class='lineno'&gt;64&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;65&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;remove&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;66&lt;/span&gt;     &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;67&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='na'&gt;contains&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;68&lt;/span&gt;             &lt;span class='nb'&gt;unset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_store&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$name&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt;69&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;70&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;71&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;72&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/29/register-pattern</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/29/register-pattern</guid>
                <pubDate>2013-09-29T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Ajax提交表单</title>
                <description>&lt;blockquote&gt;
&lt;p&gt;主要使用了&lt;code&gt;jQuery ajax - serialize()&lt;/code&gt; 方法.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;The .serialize() method creates a text string in standard URL-encoded notation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;It can act on a jQuery object that has selected individual form controls, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;: &lt;code&gt;$( &amp;quot;input, textarea, select&amp;quot; ).serialize();&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;html代码:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://code.jquery.com/jquery-1.9.1.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;             &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;                 &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;#myForm&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;on&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;e&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;                     &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ajax&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;                         &lt;span class='nx'&gt;url&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;./ajaxSubmit.php&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;                         &lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;serialize&lt;/span&gt;&lt;span class='p'&gt;(),&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;                         &lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;                         &lt;span class='nx'&gt;success&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;                             &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;#var_dump_POST&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;                         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;                     &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;                 &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;             &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;             &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;form&lt;/span&gt; &lt;span class='na'&gt;action=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;method=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;myForm&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;             &lt;span class='nt'&gt;&amp;lt;label&lt;/span&gt; &lt;span class='na'&gt;for=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;username:&lt;span class='nt'&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;             &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;name=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;             &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;var_dump_POST&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;php代码:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='nb'&gt;var_dump&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$_POST&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/29/ajax-submit-form</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/29/ajax-submit-form</guid>
                <pubDate>2013-09-29T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>多个文件上传</title>
                <description>&lt;blockquote&gt;
&lt;p&gt;html代码如下,有两点需要注意的:一是设置form的enctype属性,二是使用post方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;meta&lt;/span&gt; &lt;span class='na'&gt;charset=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;form&lt;/span&gt; &lt;span class='na'&gt;action=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;test.php&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;method=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;enctype=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;name=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;userfile1&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;name=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;userfile2&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;name=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;userfile3&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;input&lt;/span&gt; &lt;span class='na'&gt;type=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;php代码如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='sd'&gt; * 错误代码:&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='sd'&gt; * &lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='sd'&gt; * UPLOAD_ERR_OK&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='sd'&gt; *&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='sd'&gt; *    其值为 0，没有错误发生，文件上传成功。&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='sd'&gt; * UPLOAD_ERR_INI_SIZE&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='sd'&gt; *&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='sd'&gt; *    其值为 1，上传的文件超过了 php.ini 中 upload_max_filesize 选项限制的值。&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='sd'&gt; * UPLOAD_ERR_FORM_SIZE&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='sd'&gt; *&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='sd'&gt; *    其值为 2，上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值。&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='sd'&gt; * UPLOAD_ERR_PARTIAL&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='sd'&gt; *&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='sd'&gt; *    其值为 3，文件只有部分被上传。&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='sd'&gt; * UPLOAD_ERR_NO_FILE&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='sd'&gt; *&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='sd'&gt; *    其值为 4，没有文件被上传。&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='sd'&gt; * UPLOAD_ERR_NO_TMP_DIR&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; &lt;span class='sd'&gt; *&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='sd'&gt; *    其值为 6，找不到临时文件夹。PHP 4.3.10 和 PHP 5.0.3 引进。&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='sd'&gt; * UPLOAD_ERR_CANT_WRITE&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt; &lt;span class='sd'&gt; *&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt; &lt;span class='sd'&gt; *    其值为 7，文件写入失败。PHP 5.1.0 引进。&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt; &lt;span class='sd'&gt; *&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;empty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$_FILES&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;     &lt;span class='k'&gt;foreach&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$_FILES&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='nv'&gt;$key&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//上传过程中未出错&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;is_uploaded_file&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt;                 &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;move_uploaded_file&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='cm'&gt;/*...目的位置*/&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt;                     &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;file &amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39; has been uploaded.&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt;                 &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt;                     &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Cann\&amp;#39;t upload file!Maybe permission deny!&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;36&lt;/span&gt;                 &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;37&lt;/span&gt;             &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;38&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;39&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;40&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;41&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/25/multiple-file-upload</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/25/multiple-file-upload</guid>
                <pubDate>2013-09-25T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>递归与分治--格雷码</title>
                <description>&lt;h3 id='id62'&gt;格雷码&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Gray码是一个长度为2^n的序列.序列中无相同元素,每个元素都是长度为n位的(0,1)串,相邻元素恰好只有一位不同.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;题目中要求相邻元素恰好只有一位不同,那就不能通过简单的全排列来解,在递归的过程应该需要做一些选择判断之类的.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;将排列画成如下图:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='gray1' src='/assets/img/201309230301.png' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;由树从左到右可得000,001,010,011,可见这并不符合要求.如果将排列画成下图:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='gray2' src='/assets/img/201309230302.png' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;由树从左到右可得000,001,011,010,可见符合要求,再仔细分析可得,当从根结点到叶子结点的父结点路径上,如果有偶数个0,则它的左右孩子为01,如果有奇数个0,则它的左右孩子为10,这样就能保证每个相邻元素之间只有一位不同.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;所以在递归函数中,最关键的一点就是,判断当前序列0的个数时偶数还是奇数,然后采用不同的递归顺序调用.核心代码如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;gray&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;t&lt;/span&gt; &lt;span class='cm'&gt;/*...省略部分参数*/&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;level&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//递归出口&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;         &lt;span class='c1'&gt;//输出元素&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='cm'&gt;/*...省略部分代码*/&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;is_even&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//如果时偶数个0&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='n'&gt;gray&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='n'&gt;gray&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;         &lt;span class='n'&gt;gray&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;         &lt;span class='n'&gt;gray&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='sc'&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/24/recursive-divide-3</link>
                <guid>http://yangxikun.github.io/算法/2013/09/24/recursive-divide-3</guid>
                <pubDate>2013-09-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>递归与分治--汉诺塔</title>
                <description>&lt;h3 id='id60'&gt;汉诺塔移动圆盘的递归分解&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如下图所示:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='hanoi' src='/assets/img/201309230201.png' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;当n=1时,直接将圆盘移到b即可; 当n&amp;gt;1时,首先将n-1个较小的圆盘借助b移到c上,再将a剩下的最大圆盘移到b上,接着将c中n-1个圆盘借助a移动到b.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id61'&gt;算法代码&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;hanoi&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='c1'&gt;//函数实现将a中的圆盘借助c,移动到b&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;         &lt;span class='n'&gt;hanoi&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//将a中的n-1个圆盘借助b,移动到c&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;         &lt;span class='n'&gt;move&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//将a中的最后一个圆盘移动到b&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt;         &lt;span class='n'&gt;hanoi&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;n&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;b&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//将c中的n-1个圆盘借助a,移动到b&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//hanoi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/24/recursive-divide-2</link>
                <guid>http://yangxikun.github.io/算法/2013/09/24/recursive-divide-2</guid>
                <pubDate>2013-09-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>递归与分治--全排列</title>
                <description>&lt;h3 id='id58'&gt;排列问题&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;设R={r1,r2,r3,&amp;#8230;,rn}是要进行排列的n个元素,Ri=R-{ri}.集合X的全排列记为Perm(X).(ri)Perm(X)表示在全排列Perm(X)的每一个排列前加上前缀ri得到的排列.R的全排列可归纳定义如下:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当n=1时,Perm(R)=(r),其中r是集合R中唯一的元素; 当n&amp;gt;1时,Perm(R)由(r1)Perm(R1),(r2)Perm(R2),&amp;#8230;,(rn)Perm(Rn)构成,如此,Perm(R1),&amp;#8230;,Perm(Rn)也可以递归分解下去.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id59'&gt;算法代码&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;Perm&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;list&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='c1'&gt;//产生list[k:m]的所有全排列&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;         &lt;span class='c1'&gt;//剩下最后一个元素&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='n'&gt;cout&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;endl&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='n'&gt;swap&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;             &lt;span class='n'&gt;Perm&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;list&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;             &lt;span class='n'&gt;swap&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;list&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/24/recursive-divide-1</link>
                <guid>http://yangxikun.github.io/算法/2013/09/24/recursive-divide-1</guid>
                <pubDate>2013-09-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>PHP中比较少用但很有用的几个函数</title>
                <description>&lt;p&gt;&lt;em&gt;转载自&lt;a href='http://www.admin10000.com/document/2610.html'&gt;8个开发必备的PHP 功能&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='id56'&gt;函数接收任意数量的参数&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;funtest&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='nv'&gt;$args&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;func_get_args&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;foreach&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$args&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='nv'&gt;$k&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;$v&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$k&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;: &amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$v&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='nx'&gt;funtest&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='nx'&gt;funtest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='nx'&gt;funtest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;next&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='glob'&gt;使用glob()查找文件&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='c1'&gt;//取得当前目录下后缀名为.php的文件&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;glob&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;*.php&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='nb'&gt;print_r&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; 
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='c1'&gt;//当前目录下后缀名为.php和.html的文件&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;glob&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;*.{php,html}&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;GLOB_BRACE&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='nb'&gt;print_r&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='c1'&gt;//还可以添加路径&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;glob&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;./testdrive/i*.php&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='nb'&gt;print_r&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; 
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='c1'&gt;//如果你想得到绝对路径,你可以调用realpath()函数&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;glob&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;./testdrive/i*.php&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;array_map&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;realpath&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='nb'&gt;print_r&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$files&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id'&gt;生成唯一的id&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;很多朋友都利用md5()来生成唯一的编号，但是md5()有几个缺点：1.无序，导致数据库中排序性能下降。2.太长，需要更多的存储空间。其实PHP中自带一个函数来生成唯一的id，这个函数就是uniqid() 。下面是用法：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='c1'&gt;// generate unique string&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;uniqid&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; 
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='c1'&gt;// generate another unique string&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;uniqid&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; 
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='c1'&gt;//该算法是根据CPU时间戳来生成的，所以在相近的时间段内，id前几位是一样的，这也方便id的排序，如果你想更好的避免重复，可以在id前加上前缀，如：&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; 
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='c1'&gt;// 前缀&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;uniqid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;foo_&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; 
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='c1'&gt;// 有更多的熵&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;uniqid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;true&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; 
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='c1'&gt;// 都有&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;uniqid&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;bar_&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='k'&gt;true&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id57'&gt;字符串压缩&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;当我们说到压缩，我们可能会想到文件压缩，其实，字符串也是可以压缩的。PHP提供了gzcompress() 和 gzuncompress() 函数：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='x'&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='nv'&gt;$string&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Lorem ipsum dolor sit amet, consectetur&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='s1'&gt;adipiscing elit. Nunc ut elit id mi ultricies&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='s1'&gt;adipiscing. Nulla facilisi. Praesent pulvinar,&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='s1'&gt;sapien vel feugiat vestibulum, nulla dui pretium orci,&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='s1'&gt;non ultricies elit lacus quis ante. Lorem ipsum dolor&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='s1'&gt;sit amet, consectetur adipiscing elit. Aliquam&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='s1'&gt;pretium ullamcorper urna quis iaculis. Etiam ac massa&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='s1'&gt;sed turpis tempor luctus. Curabitur sed nibh eu elit&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='s1'&gt;mollis congue. Praesent ipsum diam, consectetur vitae&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='s1'&gt;ornare a, aliquam a nunc. In id magna pellentesque&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='s1'&gt;tellus posuere adipiscing. Sed non mi metus, at lacinia&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='s1'&gt;augue. Sed magna nisi, ornare in mollis in, mollis&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='s1'&gt;sed nunc. Etiam at justo in leo congue mollis.&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='s1'&gt;Nullam in neque eget metus hendrerit scelerisque&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='s1'&gt;eu non enim. Ut malesuada lacus eu nulla bibendum&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='s1'&gt;id euismod urna sodales. &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='nv'&gt;$compressed&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;gzcompress&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$string&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Original size: &amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='nb'&gt;strlen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$string&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; 
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Compressed size: &amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt; &lt;span class='nb'&gt;strlen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$compressed&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt; 
&lt;span class='lineno'&gt;25&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Compressed string:&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$compressed&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt; &lt;span class='c1'&gt;// 解压缩&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt; &lt;span class='nv'&gt;$original&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;gzuncompress&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$compressed&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Uncompressed string:&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$original&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;几乎有50% 压缩比率。同时，你还可以使用gzencode()和gzdecode()函数来压缩，只不过其用了不同的压缩算法。&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/23/special-function-php</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/23/special-function-php</guid>
                <pubDate>2013-09-23T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>递归遍历目录</title>
                <description>&lt;h3 id='id54'&gt;方法一&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='x'&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;showDir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dir&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='nv'&gt;$r&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='k'&gt;foreach&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;scandir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dir&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='nv'&gt;$key&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;// scandir()列出指定路径中的文件和目录&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='nv'&gt;$value&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;..&amp;#39;&lt;/span&gt;  &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;             &lt;span class='k'&gt;continue&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;is_dir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dir&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$value&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;             &lt;span class='nv'&gt;$r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$dir&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;showDir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dir&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$value&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nv'&gt;$r&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='nb'&gt;var_dump&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;showDir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id55'&gt;方法二&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='x'&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;showDir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dir&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='nv'&gt;$r&lt;/span&gt;              &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='nv'&gt;$handledir&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;opendir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dir&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='k'&gt;false&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='nv'&gt;$dirName&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;readdir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$handledir&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//readdir()返回目录中下一个文件的文件名。文件名以在文件系统中的排序返回。 &lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dirName&lt;/span&gt;&lt;span class='o'&gt;===&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='nv'&gt;$dirName&lt;/span&gt;&lt;span class='o'&gt;==&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;..&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='k'&gt;continue&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nb'&gt;is_dir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dir&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$dirName&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;             &lt;span class='nv'&gt;$r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$dir&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$dirName&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;showDir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dir&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$dirName&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nv'&gt;$r&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='nb'&gt;var_dump&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;showDir&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/22/recursive-traverse-dir</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/22/recursive-traverse-dir</guid>
                <pubDate>2013-09-22T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>无限分类数据的树形格式化</title>
                <description>&lt;p&gt;&lt;em&gt;转载自:&lt;a href='http://www.oschina.net/code/snippet_173183_11767'&gt;9行代码太浪费了，5行代码足矣，不用递归实现无限分类数据的树形格式化&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='x'&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; 
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='sd'&gt; * 此方法由@Tonton 提供&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='sd'&gt; * http://my.oschina.net/u/918697&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='sd'&gt; * @date 2012-12-12 &lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;genTree5&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; 
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='k'&gt;foreach&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt;         &lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]][&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;son&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt; 
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nb'&gt;isset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;son&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;son&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt; 
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; 
&lt;span class='lineno'&gt;14&lt;/span&gt; 
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; &lt;span class='sd'&gt; * 将数据格式化成树形结构&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='sd'&gt; * @author Xuefen.Tong&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='sd'&gt; * @param array $items&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='sd'&gt; * @return array &lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;genTree9&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;     &lt;span class='nv'&gt;$tree&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt; &lt;span class='c1'&gt;//格式化好的树&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;     &lt;span class='k'&gt;foreach&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt; &lt;span class='k'&gt;as&lt;/span&gt; &lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;isset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]]))&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;             &lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]][&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;son&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;][]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;         &lt;span class='k'&gt;else&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;             &lt;span class='nv'&gt;$tree&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;$item&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nv'&gt;$tree&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt; 
&lt;span class='lineno'&gt;31&lt;/span&gt; &lt;span class='nv'&gt;$items&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt;     &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;江西省&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt;     &lt;span class='mi'&gt;2&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;黑龙江省&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt;     &lt;span class='mi'&gt;3&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;南昌市&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt;     &lt;span class='mi'&gt;4&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;哈尔滨市&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;36&lt;/span&gt;     &lt;span class='mi'&gt;5&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;鸡西市&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;37&lt;/span&gt;     &lt;span class='mi'&gt;6&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;香坊区&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;38&lt;/span&gt;     &lt;span class='mi'&gt;7&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;南岗区&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;39&lt;/span&gt;     &lt;span class='mi'&gt;8&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;和兴路&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;40&lt;/span&gt;     &lt;span class='mi'&gt;9&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;9&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;西大直街&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;41&lt;/span&gt;     &lt;span class='mi'&gt;10&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;10&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;东北林业大学&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;42&lt;/span&gt;     &lt;span class='mi'&gt;11&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;11&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;9&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;哈尔滨工业大学&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;43&lt;/span&gt;     &lt;span class='mi'&gt;12&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;12&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;8&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;哈尔滨师范大学&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;44&lt;/span&gt;     &lt;span class='mi'&gt;13&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;13&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;赣州市&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;45&lt;/span&gt;     &lt;span class='mi'&gt;14&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;14&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;13&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;赣县&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;46&lt;/span&gt;     &lt;span class='mi'&gt;15&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;15&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;13&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;于都县&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;47&lt;/span&gt;     &lt;span class='mi'&gt;16&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;14&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;茅店镇&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;48&lt;/span&gt;     &lt;span class='mi'&gt;17&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;17&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;14&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;大田乡&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;49&lt;/span&gt;     &lt;span class='mi'&gt;18&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;18&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;义源村&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;50&lt;/span&gt;     &lt;span class='mi'&gt;19&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;19&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;pid&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;16&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;上坝村&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt;51&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;52&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;53&lt;/span&gt; &lt;span class='nb'&gt;print_r&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;genTree5&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;
&lt;span class='lineno'&gt;54&lt;/span&gt; &lt;span class='nb'&gt;print_r&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;genTree9&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$items&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;
&lt;span class='lineno'&gt;55&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class='lineno'&gt;56&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/22/infinite-classification-data-tree</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/22/infinite-classification-data-tree</guid>
                <pubDate>2013-09-22T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>堆排序</title>
                <description>&lt;h3 id='id52'&gt;思想&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;建立大顶堆(每个结点key都大于其左右孩子结点key)或小顶堆(每个结点key都小于其左右孩子结点key).&lt;/li&gt;

&lt;li&gt;下面以小顶堆进行说明,在小顶堆中,根结点key是所有结点中最小的,如下图演示了建立小顶堆的过程.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='heapsort1' src='/assets/img/201309220401.png' /&gt; &lt;img alt='heapsort2' src='/assets/img/201309220402.png' /&gt; &lt;img alt='heapsort3' src='/assets/img/201309220403.png' /&gt; &lt;img alt='heapsort4' src='/assets/img/201309220404.png' /&gt; &lt;img alt='heapsort5' src='/assets/img/201309220405.png' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3.将根结点与最后一个记录交换,这样整个记录的最小值就放在了序列的最后了. 4.接下来就是重复地调整为最小堆,然后根结点与堆中最后一个结点交换.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id53'&gt;代码&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;HeapAdjust&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;HeapType&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='c1'&gt;//H.r[s..m]中记录的关键字除H.r[s].key之外均满足堆的定义,本函数调整H.r[s]的关键字,&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='c1'&gt;//使H.r[s..m]成为一个小顶堆&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='n'&gt;rc&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;=&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;*=&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;m&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//从左右孩子中选出最小的&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;rc&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//与父结点比较&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;&lt;span class='c1'&gt;//如果父结点与子结点发生交换,就要继续调整交换后,子结点所在子树为最小堆&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='n'&gt;s&lt;/span&gt;        &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;s&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;rc&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//HeapAdjust&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; 
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;HeapSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;HeapType&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='c1'&gt;//对顺序表进行堆排序&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;&lt;span class='c1'&gt;//建立最小堆&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;         &lt;span class='n'&gt;HeapAdjust&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;length&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;&lt;span class='c1'&gt;//循环调整,并交换&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;         &lt;span class='n'&gt;swap&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;         &lt;span class='n'&gt;HeapAdjust&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//因为根结点发生了改变,所以得调整根结点&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//HeapSort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/22/heap-sort</link>
                <guid>http://yangxikun.github.io/算法/2013/09/22/heap-sort</guid>
                <pubDate>2013-09-22T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>不使用第三个变量交换两个变量的方法</title>
                <description>&lt;p&gt;&lt;em&gt;核心是使用异或操作,将两个变量的值都看成二进制就一目了然了.&lt;/em&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='x'&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;123abc你好!&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='nv'&gt;$b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;好啊!456xyz&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;$a=&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;$b=&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$b&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt; &lt;span class='o'&gt;^&lt;/span&gt; &lt;span class='nv'&gt;$b&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='nv'&gt;$b&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$b&lt;/span&gt; &lt;span class='o'&gt;^&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt; &lt;span class='o'&gt;^&lt;/span&gt; &lt;span class='nv'&gt;$b&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;swap $a $b&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;$a=&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$a&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;$b=&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='nv'&gt;$b&lt;/span&gt;&lt;span class='o'&gt;.&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;&amp;lt;br /&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/22/another-wayto--swap-var</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/22/another-wayto--swap-var</guid>
                <pubDate>2013-09-22T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>快速排序</title>
                <description>&lt;h3 id='id49'&gt;思想&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;主要是递归思想的3个主要步骤&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;分解:将待排序数组a,以a[q]为基准元素将a[p:r]划分成3段a[p:q-1],a[q],a[q+1,r],使得a[p:q-1]中的所有元素小于a[q],而a[q+1:r]中任何一个元素大于等于a[q].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;递归求解:通过递归调用快速排序算法分别对a[p:q-1]和a[q+1:r]进行排序.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;合并:由于是原址排序,不需要进行合并.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id50'&gt;分解&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;基准元素是随机的,这样是为了降低划分极不平衡的情况发生的概率&lt;/em&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='nf'&gt;RandomizedPartition&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;Random&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='n'&gt;swap&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='n'&gt;pivotkey&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='n'&gt;pivotkey&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='n'&gt;swap&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;pivotkey&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='n'&gt;swap&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//RandomizedPartition&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id51'&gt;递归求解&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;RandomizedQuickSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Type&lt;/span&gt; &lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;[],&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;&lt;span class='c1'&gt;//注意递归必须要有递归出口&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;         &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;q&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;RandomizedPartition&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;         &lt;span class='n'&gt;RandomizedQuickSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;q&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;         &lt;span class='n'&gt;RandomizedQuickSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;a&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;q&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;r&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/21/quick-sort</link>
                <guid>http://yangxikun.github.io/算法/2013/09/21/quick-sort</guid>
                <pubDate>2013-09-21T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>单例模式</title>
                <description>&lt;p&gt;&lt;em&gt;学习自《Guide to PHP Design Patterns》&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='id47'&gt;什么是单例模式?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;一个类在整个PHP程序运行过程中,只需要被实例化一次,这些类通常是提供一些功能,且在程序中需要多次调用,最经典的莫过于数据库连接类.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id48'&gt;单例模式示例&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='sd'&gt; * 数据库连接类&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;DbConn&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='sd'&gt;     * @static class 当前类的实例&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;private&lt;/span&gt; &lt;span class='nv'&gt;$_instance&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; 
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='sd'&gt;     * 私有构造器,使其无法通过new实例化类&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='sd'&gt;     * &lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='sd'&gt;     * @return NULL&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='k'&gt;private&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; 
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='sd'&gt;     * 返回当前类的实例&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; &lt;span class='sd'&gt;     * &lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; &lt;span class='sd'&gt;     * @static&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='sd'&gt;     * @return class 当前类的实例&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt; &lt;span class='sd'&gt;     */&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;     &lt;span class='k'&gt;static&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;getInstance&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;       &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_instance&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;         &lt;span class='nx'&gt;DbConn&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_instance&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;DbConn&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;       &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;       &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='o'&gt;::&lt;/span&gt;&lt;span class='nv'&gt;$_instance&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/17/singleton-pattern</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/17/singleton-pattern</guid>
                <pubDate>2013-09-17T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>哈希表</title>
                <description>&lt;h3 id='id44'&gt;定义&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;根据设定的哈希函数H(key)和处理冲突的方法将一组关键字映像到一个有限的连续的地址集(区间)上,并以关键字在地址集中的值作为记录在表中的存储位置.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;哈系函数指将key经过计算得出的结果作为哈希表的索引.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;普通的哈希构造函数:直接定址法,除留取余法等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;处理冲突的方法指当不同的key经过哈希函数计算后得到相同的值时,该如何处理.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;常见的处理哈希冲突的方法:开放定址法(线性探测再散列,二次探测再散列,随机探测再散列),再哈希法,链地址法等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;哈希表装填因子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id45'&gt;哈希表的查找和插入&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='c1'&gt;//开放定址哈希表的存储结构&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;hashsize&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='mi'&gt;997&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;...&lt;/span&gt; &lt;span class='p'&gt;};&lt;/span&gt;&lt;span class='c1'&gt;//哈希表容量递增表,一个合适的素数序列&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='n'&gt;ElemType&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//数据元素存储基址,动态分配数组&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;count&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//当前数据元素个数&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;sizeIndex&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//hashsize[sizeindex]为当前容量&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='n'&gt;HashTable&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='cp'&gt;#define SUCCESS 1&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='cp'&gt;#define UNSUCCESS 0&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='cp'&gt;#define DUPLICATE -1&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;  &lt;span class='n'&gt;Status&lt;/span&gt; &lt;span class='nf'&gt;SearchHash&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;HashTable&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;KeyType&lt;/span&gt; &lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='c1'&gt;//在开放定址哈希表H中查找关键字为K的元素,若查找成功,以p指示待查数据&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;     &lt;span class='c1'&gt;//元素在表中位置,并返回SUCCESS；否则,以p指示插入位置,并返回UNSUCCESS,&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='c1'&gt;//c用以计算冲突次数,其初值为零,供建表插入时参考&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;Hash&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;K&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='n'&gt;NULLKEY&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;EQ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='c1'&gt;//该位置填有记录并且关键字不相等&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;         &lt;span class='n'&gt;collision&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//求得下一个探查地址p&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;EQ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;K&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;SUCCESS&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//查找成功,p返回待查数据元素位置&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;UNSUCCESS&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//查找不成功,即H.elem[p].key == NULLKEY,p返回插入位置&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//SearchHash&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt; 
&lt;span class='lineno'&gt;25&lt;/span&gt; &lt;span class='n'&gt;Status&lt;/span&gt; &lt;span class='nf'&gt;InsertHash&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;HashTable&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;Elemtype&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;     &lt;span class='c1'&gt;//查找不成功时插入数据元素e到开放定址哈希表中,并返回OK；若冲突次数过大,则重建哈希表&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;     &lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;SeatchHash&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;key&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;DUPLICATE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;hashsize&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;sizeindex&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;&lt;span class='c1'&gt;//表中已有与e有相同关键字的元素&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt;         &lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;count&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;OK&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt;         &lt;span class='n'&gt;RecreateHashTable&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;H&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;UNSUCCESS&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//重建哈希表&lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//InsertHash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id46'&gt;算法应用&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;一些可以考虑用哈希算法处理的算法问题,来&lt;a href='http://blog.csdn.net/v_JULY_v/article/details/6256463'&gt;从头到尾彻底解析Hash 表算法&lt;/a&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;题目:假设目前有一千万个记录（这些查询串的重复度比较高，虽然总数是1千万，但如果除去重复后，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就是越热门。），请你统计最热门的10个查询串，要求使用的内存不能超过1G。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;思路：先用hash统计每个记录个数(每次递增某条记录的重复数目时,基本为O(1)操作,比遍历快多了)，再用堆求出top10.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;题目：海量日志数据，提取出某日访问百度次数最多的那个IP。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;思路：IP的数目还是有限的，最多2^32个，假设存储整个IP的话需要15个字节，那么所有IP将占用60G的空间，且每次都要在这60G中查找出相应的IP并计数。好的方案：将IP哈希到一张哈希表上，并且是3次哈希，第一次作为哈希表索引，其余两次作为校验。以后每次有IP访问就将其进行3次哈希，在哈希表中找到相应的值并递增访问次数。&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/14/hash-table</link>
                <guid>http://yangxikun.github.io/算法/2013/09/14/hash-table</guid>
                <pubDate>2013-09-14T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>工厂模式</title>
                <description>&lt;p&gt;&lt;em&gt;学习自《Guide to PHP Design Patterns》&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在面向对象编程中,我们实例化一个类最普遍使用的就是new操作符.但在某些情况下,new操作符也许不太好用.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;例如,当你需要对一个变量进行赋值一个实例化对象时,例如有productA和productB两个类,变量需要根据条件赋值相应的类实例,那么也许代码会是这样子:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;condition&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='nv'&gt;$var&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;productA&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='nv'&gt;$var&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;productB&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用了工厂模式的话,代码应该如下这样子:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='nv'&gt;$var&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Product&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;create&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$condition&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='o'&gt;?.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;显然,代码简洁了许多,还有其他一些好处,比如现在productA不需要了,那么在代码中,你是否要得删除所有new productA的语句?但如果在工厂模式下,你只需要修改工厂的create方法.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;一般会在以下几种情况考虑使用工厂方法:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1.当一个类的初始化需要经过许多复杂的计算或依赖于其他类时;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2.当需要动态地为变量实例化某个类的子类时;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;工厂模式所带来的好处:增强系统的可扩展性和编码时尽量少的修改量.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id43'&gt;简单的工厂示例:&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='sd'&gt; * 产品基类&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='sd'&gt; * &lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='sd'&gt; * @abstract&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='k'&gt;abstract&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Product&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt; 
&lt;span class='lineno'&gt; 9&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='sd'&gt;   * 获取产品的名字&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='sd'&gt;   * &lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; &lt;span class='sd'&gt;   * @abstract&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;   &lt;span class='k'&gt;abstract&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;getName&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt; 
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='sd'&gt; * A产品&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;ProductA&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nx'&gt;Product&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; 
&lt;span class='lineno'&gt;22&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='sd'&gt;   * 获取产品的名字&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt; &lt;span class='sd'&gt;   * &lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt; &lt;span class='sd'&gt;   * @return string&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;getName&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;     &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Product A&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt; 
&lt;span class='lineno'&gt;31&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt; 
&lt;span class='lineno'&gt;33&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt; &lt;span class='sd'&gt; * B产品&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt;36&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;ProductB&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nx'&gt;Product&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;37&lt;/span&gt; 
&lt;span class='lineno'&gt;38&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;39&lt;/span&gt; &lt;span class='sd'&gt;   * 获取产品的名字&lt;/span&gt;
&lt;span class='lineno'&gt;40&lt;/span&gt; &lt;span class='sd'&gt;   * &lt;/span&gt;
&lt;span class='lineno'&gt;41&lt;/span&gt; &lt;span class='sd'&gt;   * @return string&lt;/span&gt;
&lt;span class='lineno'&gt;42&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt;43&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;getName&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;44&lt;/span&gt;     &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Product B&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;45&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;46&lt;/span&gt; 
&lt;span class='lineno'&gt;47&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;48&lt;/span&gt; 
&lt;span class='lineno'&gt;49&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;50&lt;/span&gt; &lt;span class='sd'&gt; * 工厂类,用于生产产品&lt;/span&gt;
&lt;span class='lineno'&gt;51&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt;52&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;ProductFactory&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;53&lt;/span&gt; 
&lt;span class='lineno'&gt;54&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;55&lt;/span&gt; &lt;span class='sd'&gt;   * 创建product子类&lt;/span&gt;
&lt;span class='lineno'&gt;56&lt;/span&gt; &lt;span class='sd'&gt;   * &lt;/span&gt;
&lt;span class='lineno'&gt;57&lt;/span&gt; &lt;span class='sd'&gt;   * @param mixed $condition 具体条件&lt;/span&gt;
&lt;span class='lineno'&gt;58&lt;/span&gt; &lt;span class='sd'&gt;   * @return Product&lt;/span&gt;
&lt;span class='lineno'&gt;59&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt;60&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;create&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$condition&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;61&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$condition&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;62&lt;/span&gt;       &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;ProductA&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;63&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;64&lt;/span&gt;       &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;ProductB&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;65&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;66&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;67&lt;/span&gt;   
&lt;span class='lineno'&gt;68&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;69&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂的工厂模式可能会定义接口类工厂或抽象类工厂,以及复杂的创建条件.&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/13/factory-pattern</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/13/factory-pattern</guid>
                <pubDate>2013-09-13T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>AOE网(关键路径)</title>
                <description>&lt;h3 id='id36'&gt;描述&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;AOE网是一个带权的有向无环图,其中,顶点表示事件,弧表示活动,权表示活动持续的时间.通常,AOE网可用来估算工程的完成时间.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;网中只有一个入度为零的顶点(源点)和一个出度为零的顶点(汇点).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='AOE' src='/assets/img/201309070101.jpg' /&gt;&lt;/p&gt;

&lt;h3 id='id37'&gt;问题&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;1.完成整项工程至少需要多少时间? 2.哪些活动是影响工程进度的关键?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id38'&gt;思想&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;AOE网中有些活动是可以并行地运行,所以完成工程的最短时间是从开始点到完成点的最长路径的长度. 2.路径长度最长的路径叫做关键路径.&lt;/li&gt;

&lt;li&gt;假设开始点是v1,从v1到vi的最长路径叫做事件vi的最早发生时间(因为vi事件要等到所有以vi为头的弧(活动)完成才能发生).这个时间决定了所有以vi为尾的弧所表示的活动的最早发生时间.&lt;/li&gt;

&lt;li&gt;用e(i)表示活动ai的最早开始时间,用l(i)表示活动的最迟开始时间(在不推迟整个工程的前提下,活动ai的最迟开始时间),两者之差l(i)-e(i)意味着完成活动ai的时间剩余量.我们把l(i)=e(i)的活动叫做关键活动. 5.关键路径上的所有活动都是关键活动,因此提前完成非关键活动并不能加快工程进度.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id='id39'&gt;求解分析&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;辨别关键活动就是要找e(i)=l(i)的活动.设AOE网中活动的最早开始时间为e(i)和最迟开始时间为l(i),事件的最早发生时间为ve(j)和最迟发生时间为vl(j).如果活动ai由弧&lt;code&gt;j,k&lt;/code&gt;表示,其持续时间记为dut(&lt;code&gt;j,k&lt;/code&gt;),则有如下关系:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;e(i)=ve(j)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;l(i)=vl(k)-dut(&lt;code&gt;j,k&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;求解ve(j)和vl(j)如下:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;从ve(0)=0开始向前递推:ve(j)=Max{ve(i)+dut(&lt;code&gt;i,j&lt;/code&gt;)} &lt;code&gt;i,j&lt;/code&gt;属于T,T是所有以第j个顶点为头的弧的集合&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;从vl(n-1)=ve(n-1)起向后递推:vl(i)=Min{vl(j)-dut(&lt;code&gt;i,j&lt;/code&gt;)} &lt;code&gt;i,j&lt;/code&gt;属于S,S是所有以第i个顶点为尾的弧的集合&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='id40'&gt;算法流程&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;输入e条弧,建立AOE网为邻接表存储结构&lt;/li&gt;

&lt;li&gt;从源点出发,令ve&lt;span&gt;0&lt;/span&gt;=0,按拓扑有序求其余各顶点的最早发生时间&lt;/li&gt;

&lt;li&gt;从汇点出发,令vl&lt;span&gt;n-1&lt;/span&gt;=ve&lt;span&gt;n-1&lt;/span&gt;,按逆拓扑有序求其余顶点的最迟开始时间&lt;/li&gt;

&lt;li&gt;根据各顶点的ve和vl,求每条弧s的最早开始时间e(s)和最迟开始时间l(s),若某条弧满足e(s)=l(s),则为关键活动&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id='id41'&gt;辅助&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;栈T用于存储拓扑序列 ve数组记录事件最早开始时间,vl数组记录事件最迟开始时间&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id42'&gt;代码&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='n'&gt;Status&lt;/span&gt; &lt;span class='nf'&gt;TopologicalSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ALGraph&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;Stack&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='c1'&gt;//有向图G采用邻接表存储结构&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='c1'&gt;//若G无回路,则输出G的顶点的一个拓扑序列并返回OK,否则ERROR.&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='n'&gt;FindInDegree&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;indegree&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;    &lt;span class='c1'&gt;//对各顶点求入度indegree[0...vernum-1]&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='n'&gt;InitStack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='n'&gt;InitStack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;T&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='n'&gt;ve&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mf'&gt;0.&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;//建零入度顶点栈S&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;indegree&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;StackPush&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;//入度为0者进栈&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='cm'&gt;/*上面步骤可以在FindInDegree()函数中完成*/&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='n'&gt;count&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//对输出顶点计数&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;StackEmpty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;         &lt;span class='n'&gt;StackPop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='n'&gt;StackPush&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;count&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;   &lt;span class='c1'&gt;//i号顶点入栈T并计数&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vertices&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;firstarc&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;nextarc&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;&lt;span class='c1'&gt;//对i号顶点的每个邻接点的入度减1&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='n'&gt;indegree&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;adjvex&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;StackPush&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;adjvex&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//若入度为零,则入栈&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;ve&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;+*&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;info&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;ve&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;adjvex&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;ve&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;ve&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;+*&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;info&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//相当于ve(j)=Max{ve(i)+dut(&amp;lt;i,j&amp;gt;)}&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//for&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//while&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;count&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;ERROR&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    &lt;span class='c1'&gt;//该有向图有回路&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;OK&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//TopologicalSort&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt; 
&lt;span class='lineno'&gt;23&lt;/span&gt; &lt;span class='n'&gt;Status&lt;/span&gt; &lt;span class='nf'&gt;CriticalPath&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ALGraph&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;     &lt;span class='c1'&gt;//G为有向网,输出G的各项关键活动&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;TopologicalOrder&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;ERROR&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;     &lt;span class='n'&gt;vl&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mf'&gt;0.&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;ve&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mf'&gt;0.&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;&lt;span class='c1'&gt;//初始化顶点事件的最迟发生时间&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;StackEmpty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;//按逆拓扑序列求各顶点的vl值&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;StackPop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vertices&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;firstarc&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;nextarc&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;             &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;adjvex&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;dut&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;info&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;vl&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;dut&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;vl&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;vl&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;vl&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;dut&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//for&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='c1'&gt;//求每条边的最早开始时间和最迟开始时间&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vertices&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;firstarc&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;nextarc&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt;             &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;adjvex&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;dut&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;info&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt;             &lt;span class='n'&gt;ee&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;ve&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt; &lt;span class='n'&gt;el&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;vl&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='n'&gt;dut&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;36&lt;/span&gt;             &lt;span class='n'&gt;tag&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ee&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;el&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;37&lt;/span&gt;             &lt;span class='n'&gt;printf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;dut&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ee&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;el&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;tag&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//输出关键活动&lt;/span&gt;
&lt;span class='lineno'&gt;38&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//for p&lt;/span&gt;
&lt;span class='lineno'&gt;39&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//CriticalPath&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/07/activity-on-edge</link>
                <guid>http://yangxikun.github.io/算法/2013/09/07/activity-on-edge</guid>
                <pubDate>2013-09-07T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>值对象模式</title>
                <description>&lt;p&gt;&lt;em&gt;学习自《Guide to PHP Design Patterns》&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='id34'&gt;什么是值对象模式？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;像PHP的整型那样运作：如果你把同一个对象资源赋值给两个不同的变量，然后改变其中的一个变量，另一个变量仍然不受影响。事实上，这就是Value Object模式的目标所在。&lt;em&gt;(这个有点像PHP变量的引用计数，写时拷贝)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='bug'&gt;来看一个有bug的程序例子&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;  1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;  2&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;  3&lt;/span&gt; &lt;span class='sd'&gt; * 货币类&lt;/span&gt;
&lt;span class='lineno'&gt;  4&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt;  5&lt;/span&gt; 
&lt;span class='lineno'&gt;  6&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;BadDollar&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;  7&lt;/span&gt; 
&lt;span class='lineno'&gt;  8&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt;  9&lt;/span&gt; &lt;span class='sd'&gt;   * 货币数量&lt;/span&gt;
&lt;span class='lineno'&gt; 10&lt;/span&gt; &lt;span class='sd'&gt;   *&lt;/span&gt;
&lt;span class='lineno'&gt; 11&lt;/span&gt; &lt;span class='sd'&gt;   * @var Float&lt;/span&gt;
&lt;span class='lineno'&gt; 12&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 13&lt;/span&gt;   &lt;span class='k'&gt;protected&lt;/span&gt; &lt;span class='nv'&gt;$amount&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 14&lt;/span&gt; 
&lt;span class='lineno'&gt; 15&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 16&lt;/span&gt; &lt;span class='sd'&gt;   * 构造函数&lt;/span&gt;
&lt;span class='lineno'&gt; 17&lt;/span&gt; &lt;span class='sd'&gt;   *&lt;/span&gt;
&lt;span class='lineno'&gt; 18&lt;/span&gt; &lt;span class='sd'&gt;   * @return Null&lt;/span&gt;
&lt;span class='lineno'&gt; 19&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 20&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$amount&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 21&lt;/span&gt;     &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;amount&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;float&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='nv'&gt;$amount&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 22&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 23&lt;/span&gt; 
&lt;span class='lineno'&gt; 24&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 25&lt;/span&gt; &lt;span class='sd'&gt;   * 返回$amount的值 &lt;/span&gt;
&lt;span class='lineno'&gt; 26&lt;/span&gt; &lt;span class='sd'&gt;   *&lt;/span&gt;
&lt;span class='lineno'&gt; 27&lt;/span&gt; &lt;span class='sd'&gt;   * @return Float&lt;/span&gt;
&lt;span class='lineno'&gt; 28&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 29&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;getAmount&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 30&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;amount&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 31&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 32&lt;/span&gt; 
&lt;span class='lineno'&gt; 33&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 34&lt;/span&gt; &lt;span class='sd'&gt;   * 将$amount的值增加&lt;/span&gt;
&lt;span class='lineno'&gt; 35&lt;/span&gt; &lt;span class='sd'&gt;   *&lt;/span&gt;
&lt;span class='lineno'&gt; 36&lt;/span&gt; &lt;span class='sd'&gt;   * @return Null&lt;/span&gt;
&lt;span class='lineno'&gt; 37&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 38&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dollar&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 39&lt;/span&gt;     &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;amount&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='nv'&gt;$dollar&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;getAmount&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 40&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 41&lt;/span&gt; 
&lt;span class='lineno'&gt; 42&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 43&lt;/span&gt; 
&lt;span class='lineno'&gt; 44&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 45&lt;/span&gt; &lt;span class='sd'&gt; * 工作类&lt;/span&gt;
&lt;span class='lineno'&gt; 46&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 47&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Work&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 48&lt;/span&gt; 
&lt;span class='lineno'&gt; 49&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 50&lt;/span&gt; &lt;span class='sd'&gt;   * 工资&lt;/span&gt;
&lt;span class='lineno'&gt; 51&lt;/span&gt; &lt;span class='sd'&gt;   *&lt;/span&gt;
&lt;span class='lineno'&gt; 52&lt;/span&gt; &lt;span class='sd'&gt;   * @var Float&lt;/span&gt;
&lt;span class='lineno'&gt; 53&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 54&lt;/span&gt;   &lt;span class='k'&gt;protected&lt;/span&gt; &lt;span class='nv'&gt;$salary&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 55&lt;/span&gt; 
&lt;span class='lineno'&gt; 56&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 57&lt;/span&gt; &lt;span class='sd'&gt;   * 构造函数&lt;/span&gt;
&lt;span class='lineno'&gt; 58&lt;/span&gt; &lt;span class='sd'&gt;   *&lt;/span&gt;
&lt;span class='lineno'&gt; 59&lt;/span&gt; &lt;span class='sd'&gt;   * @return Null&lt;/span&gt;
&lt;span class='lineno'&gt; 60&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 61&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;__construct&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 62&lt;/span&gt;     &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;salary&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;BadDollar&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 63&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 64&lt;/span&gt; 
&lt;span class='lineno'&gt; 65&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 66&lt;/span&gt; &lt;span class='sd'&gt;   * 支付薪水&lt;/span&gt;
&lt;span class='lineno'&gt; 67&lt;/span&gt; &lt;span class='sd'&gt;   *&lt;/span&gt;
&lt;span class='lineno'&gt; 68&lt;/span&gt; &lt;span class='sd'&gt;   * @return class BadDollar&lt;/span&gt;
&lt;span class='lineno'&gt; 69&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 70&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;payDay&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 71&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;salary&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 72&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 73&lt;/span&gt; 
&lt;span class='lineno'&gt; 74&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 75&lt;/span&gt; 
&lt;span class='lineno'&gt; 76&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 77&lt;/span&gt; &lt;span class='sd'&gt; * 职工类&lt;/span&gt;
&lt;span class='lineno'&gt; 78&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 79&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;Person&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 80&lt;/span&gt; 
&lt;span class='lineno'&gt; 81&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 82&lt;/span&gt; &lt;span class='sd'&gt;   * 钱包&lt;/span&gt;
&lt;span class='lineno'&gt; 83&lt;/span&gt; &lt;span class='sd'&gt;   *&lt;/span&gt;
&lt;span class='lineno'&gt; 84&lt;/span&gt; &lt;span class='sd'&gt;   * @var class BadDollar&lt;/span&gt;
&lt;span class='lineno'&gt; 85&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 86&lt;/span&gt;   &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='nv'&gt;$wallet&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 87&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 88&lt;/span&gt; 
&lt;span class='lineno'&gt; 89&lt;/span&gt; &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 90&lt;/span&gt; &lt;span class='sd'&gt; * 测试类&lt;/span&gt;
&lt;span class='lineno'&gt; 91&lt;/span&gt; &lt;span class='sd'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 92&lt;/span&gt; &lt;span class='k'&gt;class&lt;/span&gt; &lt;span class='nc'&gt;StackTest&lt;/span&gt; &lt;span class='k'&gt;extends&lt;/span&gt; &lt;span class='nx'&gt;PHPUnit_Framework_TestCase&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 93&lt;/span&gt;   &lt;span class='sd'&gt;/**&lt;/span&gt;
&lt;span class='lineno'&gt; 94&lt;/span&gt; &lt;span class='sd'&gt;   * 测试BadDollar类的正确性&lt;/span&gt;
&lt;span class='lineno'&gt; 95&lt;/span&gt; &lt;span class='sd'&gt;   */&lt;/span&gt;
&lt;span class='lineno'&gt; 96&lt;/span&gt;     &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;testBadDollarWorking&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
&lt;span class='lineno'&gt; 97&lt;/span&gt;         &lt;span class='nv'&gt;$job&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Work&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 98&lt;/span&gt;         &lt;span class='nv'&gt;$p1&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Person&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 99&lt;/span&gt;         &lt;span class='nv'&gt;$p2&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Person&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;100&lt;/span&gt;         &lt;span class='nv'&gt;$p1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;wallet&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$job&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;payDay&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;101&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;assertEquals&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$p1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;wallet&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;getAmount&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;102&lt;/span&gt;         &lt;span class='nv'&gt;$p2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;wallet&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$job&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;payDay&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;103&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;assertEquals&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$p2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;wallet&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;getAmount&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;104&lt;/span&gt;         &lt;span class='nv'&gt;$p1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;wallet&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$job&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;payDay&lt;/span&gt;&lt;span class='p'&gt;());&lt;/span&gt;
&lt;span class='lineno'&gt;105&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;assertEquals&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;400&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$p1&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;wallet&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;getAmount&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;106&lt;/span&gt;         &lt;span class='c1'&gt;//this is bad — actually 400&lt;/span&gt;
&lt;span class='lineno'&gt;107&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;assertEquals&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$p2&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;wallet&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;getAmount&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;108&lt;/span&gt;         &lt;span class='c1'&gt;//this is really bad — actually 400&lt;/span&gt;
&lt;span class='lineno'&gt;109&lt;/span&gt;         &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;assertEquals&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$job&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;payDay&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;getAmount&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;110&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;111&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;112&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;从上面的代码和测试中可以看出,$p1和$p2拥有相同的BadDollar实例.为什么会这样呢?因为PHP5中,对象实例赋值给变量是按引用赋值的,且修改了对象实例的内容时,并不会像普通类型变量一样发生&amp;#8221;写时复制,&amp;#8221;值对象模式就是为了实现对象的&amp;#8221;写时复制&amp;#8221;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id35'&gt;解决方案&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;修改BadDollar类的add方法,如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='k'&gt;public&lt;/span&gt; &lt;span class='k'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$dollar&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;BadDollar&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$this&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;amount&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nv'&gt;$dollar&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;getAmount&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;修改测试用例中的&lt;code&gt;$p1-&amp;gt;wallet-&amp;gt;add($job-&amp;gt;payDay());&lt;/code&gt;为&lt;code&gt;$p1-&amp;gt;wallet = $p1-&amp;gt;wallet-&amp;gt;add($job-&amp;gt;payDay());&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/06/value-object-pattern</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/06/value-object-pattern</guid>
                <pubDate>2013-09-06T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>最短路径问题(迪杰斯特拉算法)</title>
                <description>&lt;h3 id='id31'&gt;思想&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Dijkstra求有向网G的某一个顶点到其余顶点的最短路径问题.&lt;/li&gt;

&lt;li&gt;假设V为已求得最短路径的点的集合,U为所有顶点的集合.&lt;/li&gt;

&lt;li&gt;从U-V中选出一个离起点最近的顶点加入V中.&lt;/li&gt;

&lt;li&gt;更新U-V中的顶点到起点的最短距离.&lt;/li&gt;

&lt;li&gt;如果U不为空,转步骤3,否则继续. 6.结束&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id32'&gt;辅助&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;路径P(二维数组boolean型),当为true时,表示P[i][j]从起点到顶点i的最短路径经过顶点j,为false,表明没有经过顶点j.&lt;/li&gt;

&lt;li&gt;路径权值D(一维数组),D&lt;span&gt;i&lt;/span&gt;的值为从起点到顶点i的最短路径权值.&lt;/li&gt;

&lt;li&gt;标记数组final(一维数组boolean型),final&lt;span&gt;i&lt;/span&gt;为true时,表示顶点i加入了V集合.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id33'&gt;算法&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;ShortestPath_DIJ&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;MGraph&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;v0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;PathMatrix&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;ShortPathTable&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;         &lt;span class='n'&gt;final&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;FALSE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//初始化标记数组&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;         &lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arcs&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v0&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;&lt;span class='c1'&gt;//初始化最短路径&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;FALSE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//初始化路径&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;MAX&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;&lt;span class='c1'&gt;//如果v0到v有路径&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;             &lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;v0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;TRUE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;             &lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;TRUE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//if&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//for&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='n'&gt;final&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v0&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;TRUE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//初始化V集合,含有v0起点&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;         &lt;span class='n'&gt;min&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;MAX&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//当前所知距离v0顶点的最近距离&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='c1'&gt;//寻找满足要求的顶点&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;final&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;min&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;                 &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;                 &lt;span class='n'&gt;min&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;             &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//if&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;         &lt;span class='n'&gt;final&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;TRUE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//加入V集合&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;final&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;min&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arcs&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;&lt;span class='c1'&gt;//更新U-V中顶点到起点的最短路径&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;                 &lt;span class='n'&gt;D&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;min&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arcs&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;                 &lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mf'&gt;1.&lt;/span&gt;&lt;span class='p'&gt;..&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='mf'&gt;1.&lt;/span&gt;&lt;span class='p'&gt;..&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;                 &lt;span class='n'&gt;P&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;TRUE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;             &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//if&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//for&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/05/shortestpath-dij</link>
                <guid>http://yangxikun.github.io/算法/2013/09/05/shortestpath-dij</guid>
                <pubDate>2013-09-05T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>最小生成树(普利姆算法)</title>
                <description>&lt;h3 id='id28'&gt;思想&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;假设最小生成树点集为V,图的所有点集为U,初始化V含有U中任意个顶点.&lt;/li&gt;

&lt;li&gt;从U-V中选出一个离V最近的一个顶点加入V中.&lt;/li&gt;

&lt;li&gt;更新U-V中顶点到V的最短路径.&lt;/li&gt;

&lt;li&gt;U不为空转步骤2,为空继续. 5.结束.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='id29'&gt;辅助&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;closedge[]数组记录了相应顶点到V的最短距离&lt;code&gt;struct{ VertexType adjvex; VRType lowcost;}closedge[MAX]&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2. 图的存储结构为邻接矩阵.&lt;/p&gt;

&lt;h3 id='id30'&gt;算法&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;MiniSpanTree_PRIM&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;MGraph&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;VertexType&lt;/span&gt; &lt;span class='n'&gt;u&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='c1'&gt;//MGraph G 图的邻接矩阵&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;LocateVex&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;u&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='c1'&gt;//辅助数组初始化&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt; &lt;span class='o'&gt;!=&lt;/span&gt; &lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;             &lt;span class='n'&gt;closedge&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;u&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arcs&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;adj&lt;/span&gt;&lt;span class='p'&gt;};&lt;/span&gt;&lt;span class='c1'&gt;//{adjvex, lowcost}&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='n'&gt;closedge&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;u&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='n'&gt;k&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;min&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;closedge&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//从记录数组中选取最小的&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;         &lt;span class='n'&gt;closedge&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;lowcost&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//将k顶点并入V集&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='cm'&gt;/*如果把辅助数组改为链表的话,对于G.vexnum很大的情况好点,每次把并入V集合的节点free掉*/&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arcs&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;adj&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;closedge&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;lowcost&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;                 &lt;span class='n'&gt;closedge&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexs&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;arcs&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;k&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='n'&gt;j&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;adj&lt;/span&gt;&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//for&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/04/minispantree-prim</link>
                <guid>http://yangxikun.github.io/算法/2013/09/04/minispantree-prim</guid>
                <pubDate>2013-09-04T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>图的深度优先搜索和广度优先搜索</title>
                <description>&lt;h3 id='id26'&gt;深度优先搜索&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='n'&gt;Boolean&lt;/span&gt; &lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;MAX&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;&lt;span class='c1'&gt;//访问标记数组&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; 
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;DFSTraverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;Graph&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;FALSE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='n'&gt;DFS&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt; 
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;DFS&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;Graph&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;     &lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;TRUE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;FirstAdjVex&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;NextAdjVex&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;             &lt;span class='n'&gt;DFS&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id27'&gt;广度优先搜索&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;BFSTraverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;Graph&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='c1'&gt;//使用辅助队列Q和访问标记数组visited&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;         &lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;FALSE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='n'&gt;InitQueue&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;Q&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;v&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;TRUE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;             &lt;span class='n'&gt;EnQueue&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;Q&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;v&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//入队&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;             &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;QueueEmpty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;Q&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;                 &lt;span class='n'&gt;DeQueue&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;Q&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;u&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//出队&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;                 &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;FirstAdjVex&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;u&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='o'&gt;&amp;gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;NextAdjVex&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;u&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;                     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;                         &lt;span class='n'&gt;visited&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;w&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;TRUE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;                         &lt;span class='n'&gt;EnQueue&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;Q&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;w&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;                     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//if&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;             &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//while&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//if&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//for&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/04/graph-traverse</link>
                <guid>http://yangxikun.github.io/算法/2013/09/04/graph-traverse</guid>
                <pubDate>2013-09-04T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>PHP 语言结构与函数区别</title>
                <description>&lt;p&gt;&lt;em&gt;参考自鸟哥的博文&lt;a href='http://www.laruence.com/2009/12/09/1180.html'&gt;isset和is_null的不同&lt;/a&gt;和&lt;a href='http://www.php-internals.com/book/'&gt;TIPI&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='php'&gt;什么是PHP的语言结构?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;即语言本身的一部分,如echo,isset等这些和for,foreach一样,作为PHP语言的组成成分.它们也是PHP的关键字.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='opcode'&gt;从opcode来看&amp;#8221;像函数的&amp;#8221;语言结构和函数的区别&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;先看如下代码:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='nv'&gt;$a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;=&amp;gt;&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='nb'&gt;isset&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;     &lt;span class='nb'&gt;array_key_exists&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;输出的opcode如下( php -dvld.active=1 -dvld.execute=1 vld.php )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2 0 &amp;gt; EXT_STMT &lt;br /&gt; 1 INIT_ARRAY ~0 &amp;#8216;c&amp;#8217;, &amp;#8216;b&amp;#8217; 2 ASSIGN !0, ~0 3 3 EXT_STMT &lt;br /&gt; 4 ZEND_ISSET_ISEMPTY_DIM_OBJ 2000000 ~2 !0, &amp;#8216;b&amp;#8217; 5 FREE ~2 4 6 EXT_STMT &lt;br /&gt; 7 EXT_FCALL_BEGIN &lt;br /&gt; 8 SEND_VAL &amp;#8216;b&amp;#8217; 9 SEND_VAR !0 10 DO_FCALL 2 &amp;#8216;array_key_exists&amp;#8217; 11 EXT_FCALL_END &lt;br /&gt; 6 12 EXT_STMT &lt;br /&gt; 13 &amp;gt; RETURN 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;从opcode中,可以看出调用array_key_exists函数是需要经过函数调用开始,传递参数,函数执行,函数结束这些步骤,而isset被翻译为ZEND_ISSET_ISEMPTY_DIM_OBJ 指令,isset和array_key_exists可以实现同样的功能,但isset要比array_key_exists快很多,因为少了函数调用所带来的开销.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;语言结构可以有返回值也可以没有,如echo和print,这里的没有和返回null是不同的,任何PHP函数都会有返回值,即使自己定义的函数中没有return,PHP内核也会&amp;#8221;帮你&amp;#8221;返回NULL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;所以在能够实现相同功能的情况下,我们应该选择使用语言结构.&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/03/php-language-structure</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/03/php-language-structure</guid>
                <pubDate>2013-09-03T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>php 函数的实现</title>
                <description>&lt;p&gt;&lt;em&gt;学习自&lt;a href='http://www.php-internals.com/book/'&gt;TIPI&lt;/a&gt;,做个小结,内容从TIPI中选取&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='id24'&gt;函数类型&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;用户定义的函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在PHP的实现中，如果函数没有显式的返回， Zend引擎也会“帮你“返回NULL。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;内部函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote /&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
    &lt;li&gt; 标准函数:count,strpos,implode等&lt;/li&gt;
    &lt;li&gt;扩展模块中的函数&lt;/li&gt;
    &lt;li&gt;语言结构:isset,empty,eval等&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;匿名函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;变量函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id25'&gt;函数的内部结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Zend引擎将函数分为以下类型：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;#define ZEND_INTERNAL_FUNCTION              1&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='cp'&gt;#define ZEND_USER_FUNCTION                  2  &lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='cp'&gt;#define ZEND_OVERLOADED_FUNCTION            3&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='cp'&gt;#define ZEND_EVAL_CODE                      4&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='cp'&gt;#define ZEND_OVERLOADED_FUNCTION_TEMPORARY  5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;其中的ZEND_USER_FUNCTION是用户函数，ZEND_INTERNAL_FUNCTION是内置的函数。也就是说PHP将内置的函数和 用户定义的函数分别保存。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id='zend_user_function'&gt;用户函数(ZEND_USER_FUNCTION)&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;ZE在执行过程中，会将运行时信息存储于_zend_execute_data中：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;_zend_execute_data&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='c1'&gt;//...省略部分代码&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='n'&gt;zend_function_state&lt;/span&gt; &lt;span class='n'&gt;function_state&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;     &lt;span class='n'&gt;zend_function&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;fbc&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;/+&lt;/span&gt;   &lt;span class='n'&gt;Function&lt;/span&gt; &lt;span class='n'&gt;Being&lt;/span&gt; &lt;span class='n'&gt;Called&lt;/span&gt; &lt;span class='err'&gt;*/&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='c1'&gt;//...省略部分代码&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; &lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;在程序初始化的过程中，function_state也会进行初始化，function_state由两个部分组成：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;_zend_function_state&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='n'&gt;zend_function&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;function&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='o'&gt;**&lt;/span&gt;&lt;span class='n'&gt;arguments&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;zend_function_state&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;**arguments是一个指向函数参数的指针，而函数体本身则存储于*function中， *function是一个zend_function结构体， 它最终存储了用户自定义函数的一切信息，它的具体结构是这样的：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;union&lt;/span&gt; &lt;span class='n'&gt;_zend_function&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='n'&gt;zend_uchar&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    &lt;span class='o'&gt;/+&lt;/span&gt;   &lt;span class='err'&gt;如用户自定义则为&lt;/span&gt; &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='n'&gt;define&lt;/span&gt; &lt;span class='n'&gt;ZEND_USER_FUNCTION&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;                             &lt;span class='n'&gt;MUST&lt;/span&gt; &lt;span class='n'&gt;be&lt;/span&gt; &lt;span class='n'&gt;the&lt;/span&gt; &lt;span class='n'&gt;first&lt;/span&gt; &lt;span class='n'&gt;element&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt; &lt;span class='err'&gt;*/&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;  
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='n'&gt;zend_uchar&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='o'&gt;/+&lt;/span&gt;   &lt;span class='n'&gt;never&lt;/span&gt; &lt;span class='n'&gt;used&lt;/span&gt; &lt;span class='err'&gt;*/&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;function_name&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    &lt;span class='c1'&gt;//函数名称&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='n'&gt;zend_class_entry&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;scope&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//函数所在的类作用域&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='n'&gt;zend_uint&lt;/span&gt; &lt;span class='n'&gt;fn_flags&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;     &lt;span class='c1'&gt;// 作为方法时的访问类型等，如ZEND_ACC_STATIC等  &lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;         &lt;span class='k'&gt;union&lt;/span&gt; &lt;span class='n'&gt;_zend_function&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//函数原型&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;         &lt;span class='n'&gt;zend_uint&lt;/span&gt; &lt;span class='n'&gt;num_args&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;     &lt;span class='c1'&gt;//参数数目&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;         &lt;span class='n'&gt;zend_uint&lt;/span&gt; &lt;span class='n'&gt;required_num_args&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//需要的参数数目&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;         &lt;span class='n'&gt;zend_arg_info&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;arg_info&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;//参数信息指针&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='n'&gt;zend_bool&lt;/span&gt; &lt;span class='n'&gt;pass_rest_by_reference&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;         &lt;span class='kt'&gt;unsigned&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;return_reference&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;//返回值 &lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;common&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;  
&lt;span class='lineno'&gt;18&lt;/span&gt;     &lt;span class='n'&gt;zend_op_array&lt;/span&gt; &lt;span class='n'&gt;op_array&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;   &lt;span class='c1'&gt;//函数中的操作&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;     &lt;span class='n'&gt;zend_internal_function&lt;/span&gt; &lt;span class='n'&gt;internal_function&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  
&lt;span class='lineno'&gt;20&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;zend_function&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;zend_function的结构中的op_array存储了该函数中所有的操作，当函数被调用时，ZE就会将这个op_array中的opline一条条顺次执行， 并将最后的返回值返回。从VLD扩展中查看的关于函数的信息可以看出，函数的定义和执行是分开的，一个函数可以作为一个独立的运行单元而存在。如下所示:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='n'&gt;Finding&lt;/span&gt; &lt;span class='n'&gt;entry&lt;/span&gt; &lt;span class='n'&gt;points&lt;/span&gt;
&lt;span class='n'&gt;Branch&lt;/span&gt; &lt;span class='n'&gt;analysis&lt;/span&gt; &lt;span class='n'&gt;from&lt;/span&gt; &lt;span class='n'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='n'&gt;Return&lt;/span&gt; &lt;span class='n'&gt;found&lt;/span&gt;
&lt;span class='nl'&gt;filename:&lt;/span&gt;       &lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='n'&gt;var&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='n'&gt;www&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='n'&gt;vld&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;php&lt;/span&gt;
&lt;span class='n'&gt;function&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;null&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;number&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;ops&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;  &lt;span class='mi'&gt;8&lt;/span&gt;
&lt;span class='n'&gt;compiled&lt;/span&gt; &lt;span class='n'&gt;vars&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;  &lt;span class='n'&gt;none&lt;/span&gt;
&lt;span class='n'&gt;line&lt;/span&gt;     &lt;span class='err'&gt;#&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt;    &lt;span class='n'&gt;op&lt;/span&gt;                           &lt;span class='n'&gt;fetch&lt;/span&gt;          &lt;span class='n'&gt;ext&lt;/span&gt;  &lt;span class='k'&gt;return&lt;/span&gt;  &lt;span class='n'&gt;operands&lt;/span&gt;
&lt;span class='o'&gt;---------------------------------------------------------------------------------&lt;/span&gt;
   &lt;span class='mi'&gt;2&lt;/span&gt;     &lt;span class='mi'&gt;0&lt;/span&gt;  &lt;span class='o'&gt;&amp;gt;&lt;/span&gt;   &lt;span class='n'&gt;EXT_STMT&lt;/span&gt;                                                 
         &lt;span class='mi'&gt;1&lt;/span&gt;      &lt;span class='n'&gt;NOP&lt;/span&gt;                                                      
   &lt;span class='mi'&gt;5&lt;/span&gt;     &lt;span class='mi'&gt;2&lt;/span&gt;      &lt;span class='n'&gt;EXT_STMT&lt;/span&gt;                                                 
         &lt;span class='mi'&gt;3&lt;/span&gt;      &lt;span class='n'&gt;EXT_FCALL_BEGIN&lt;/span&gt;                                          
         &lt;span class='mi'&gt;4&lt;/span&gt;      &lt;span class='n'&gt;DO_FCALL&lt;/span&gt;                                      &lt;span class='mi'&gt;0&lt;/span&gt;          &lt;span class='err'&gt;&amp;#39;&lt;/span&gt;&lt;span class='n'&gt;test&lt;/span&gt;&lt;span class='err'&gt;&amp;#39;&lt;/span&gt;
         &lt;span class='mi'&gt;5&lt;/span&gt;      &lt;span class='n'&gt;EXT_FCALL_END&lt;/span&gt;                                            
   &lt;span class='mi'&gt;7&lt;/span&gt;     &lt;span class='mi'&gt;6&lt;/span&gt;      &lt;span class='n'&gt;EXT_STMT&lt;/span&gt;                                                 
         &lt;span class='mi'&gt;7&lt;/span&gt;    &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;RETURN&lt;/span&gt;                                                   &lt;span class='mi'&gt;1&lt;/span&gt;
&lt;span class='nl'&gt;branch:&lt;/span&gt; &lt;span class='err'&gt;#&lt;/span&gt;  &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;line&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;     &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;    &lt;span class='mi'&gt;7&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;sop&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;     &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;eop&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;     &lt;span class='mi'&gt;7&lt;/span&gt;
&lt;span class='n'&gt;path&lt;/span&gt; &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;Function&lt;/span&gt; &lt;span class='n'&gt;test&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;
&lt;span class='n'&gt;Finding&lt;/span&gt; &lt;span class='n'&gt;entry&lt;/span&gt; &lt;span class='n'&gt;points&lt;/span&gt;
&lt;span class='n'&gt;Branch&lt;/span&gt; &lt;span class='n'&gt;analysis&lt;/span&gt; &lt;span class='n'&gt;from&lt;/span&gt; &lt;span class='n'&gt;position&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;
&lt;span class='n'&gt;Return&lt;/span&gt; &lt;span class='n'&gt;found&lt;/span&gt;
&lt;span class='nl'&gt;filename:&lt;/span&gt;       &lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='n'&gt;var&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='n'&gt;www&lt;/span&gt;&lt;span class='o'&gt;/&lt;/span&gt;&lt;span class='n'&gt;vld&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;php&lt;/span&gt;
&lt;span class='n'&gt;function&lt;/span&gt; &lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;  &lt;span class='n'&gt;test&lt;/span&gt;
&lt;span class='n'&gt;number&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;ops&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;  &lt;span class='mi'&gt;5&lt;/span&gt;
&lt;span class='n'&gt;compiled&lt;/span&gt; &lt;span class='n'&gt;vars&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;  &lt;span class='n'&gt;none&lt;/span&gt;
&lt;span class='n'&gt;line&lt;/span&gt;     &lt;span class='err'&gt;#&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt;    &lt;span class='n'&gt;op&lt;/span&gt;                           &lt;span class='n'&gt;fetch&lt;/span&gt;          &lt;span class='n'&gt;ext&lt;/span&gt;  &lt;span class='k'&gt;return&lt;/span&gt;  &lt;span class='n'&gt;operands&lt;/span&gt;
&lt;span class='o'&gt;---------------------------------------------------------------------------------&lt;/span&gt;
   &lt;span class='mi'&gt;2&lt;/span&gt;     &lt;span class='mi'&gt;0&lt;/span&gt;  &lt;span class='o'&gt;&amp;gt;&lt;/span&gt;   &lt;span class='n'&gt;EXT_NOP&lt;/span&gt;                                                  
   &lt;span class='mi'&gt;3&lt;/span&gt;     &lt;span class='mi'&gt;1&lt;/span&gt;      &lt;span class='n'&gt;EXT_STMT&lt;/span&gt;                                                 
         &lt;span class='mi'&gt;2&lt;/span&gt;      &lt;span class='n'&gt;ECHO&lt;/span&gt;                                                     &lt;span class='err'&gt;&amp;#39;&lt;/span&gt;&lt;span class='n'&gt;test&lt;/span&gt;&lt;span class='err'&gt;&amp;#39;&lt;/span&gt;
   &lt;span class='mi'&gt;4&lt;/span&gt;     &lt;span class='mi'&gt;3&lt;/span&gt;      &lt;span class='n'&gt;EXT_STMT&lt;/span&gt;                                                 
         &lt;span class='mi'&gt;4&lt;/span&gt;    &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='n'&gt;RETURN&lt;/span&gt;                                                   &lt;span class='n'&gt;null&lt;/span&gt;

&lt;span class='nl'&gt;branch:&lt;/span&gt; &lt;span class='err'&gt;#&lt;/span&gt;  &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;line&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;     &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;    &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;sop&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;     &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;eop&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;     &lt;span class='mi'&gt;4&lt;/span&gt;
&lt;span class='n'&gt;path&lt;/span&gt; &lt;span class='err'&gt;#&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; 
&lt;span class='n'&gt;End&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;function&lt;/span&gt; &lt;span class='n'&gt;test&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;注意上面出现两段,第一段的function name为NULL,第二段的function name为test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id='zend_internal_function'&gt;内部函数(ZEND_INTERNAL_FUNCTION)&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;ZEND_INTERNAL_FUNCTION函数是由扩展、PHP内核、Zend引擎提供的内部函数，一般用“C/C++”编写，可以直接在用户脚本中调用的函数。如下为内部函数的结构：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;_zend_internal_function&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='o'&gt;/+&lt;/span&gt;   &lt;span class='n'&gt;Common&lt;/span&gt; &lt;span class='n'&gt;elements&lt;/span&gt; &lt;span class='err'&gt;*/&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='n'&gt;zend_uchar&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt;   &lt;span class='n'&gt;function_name&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='n'&gt;zend_class_entry&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;scope&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='n'&gt;zend_uint&lt;/span&gt; &lt;span class='n'&gt;fn_flags&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='k'&gt;union&lt;/span&gt; &lt;span class='n'&gt;_zend_function&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='n'&gt;zend_uint&lt;/span&gt; &lt;span class='n'&gt;num_args&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='n'&gt;zend_uint&lt;/span&gt; &lt;span class='n'&gt;required_num_args&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='n'&gt;zend_arg_info&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;arg_info&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='n'&gt;zend_bool&lt;/span&gt; &lt;span class='n'&gt;pass_rest_by_reference&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='kt'&gt;unsigned&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='n'&gt;return_reference&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='o'&gt;/+&lt;/span&gt;   &lt;span class='n'&gt;END&lt;/span&gt; &lt;span class='n'&gt;of&lt;/span&gt; &lt;span class='n'&gt;common&lt;/span&gt; &lt;span class='n'&gt;elements&lt;/span&gt; &lt;span class='err'&gt;*/&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;  
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;handler&lt;/span&gt;&lt;span class='p'&gt;)(&lt;/span&gt;&lt;span class='n'&gt;INTERNAL_FUNCTION_PARAMETERS&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;_zend_module_entry&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;module&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;zend_internal_function&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;最常见的操作是在模块初始化时，ZE会遍历每个载入的扩展模块，然后将模块中function_entry中指明的每一个函数(module-&amp;gt;functions)， 创建一个zend_internal_function结构， 并将其type设置为ZEND_INTERNAL_FUNCTION，将这个结构填入全局的函数表(HashTable结构）; 函数设置及注册过程见 Zend/zend_API.c文件中的 zend_register_functions函数。这个函数除了处理函数，也处理类的方法，包括那些魔术方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;内部函数的结构与用户自定义的函数结构基本类似，有一些不同，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;调用方法，handler字段. 如果是ZEND_INTERNAL_FUNCTION， 那么ZE就调用zend_execute_internal，通过zend_internal_function.handler来执行这个函数。 而用户自定义的函数需要生成中间代码，然后通过中间代码映射到相对就把方法调用。&lt;/li&gt;

&lt;li&gt;内置函数在结构中多了一个module字段，表示属于哪个模块。不同的扩展其模块不同。&lt;/li&gt;

&lt;li&gt;type字段，在用户自定义的函数中，type字段几乎无用，而内置函数中的type字段作为几种内部函数的区分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/09/03/php-function</link>
                <guid>http://yangxikun.github.io/PHP/2013/09/03/php-function</guid>
                <pubDate>2013-09-03T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>二叉树的遍历</title>
                <description>&lt;h3 id='id20'&gt;存储结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;链式存储结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;BiTNode&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='n'&gt;TElemType&lt;/span&gt; &lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;BiTNode&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;lchild&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;rchild&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//左右孩子指针&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='n'&gt;BiTNode&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;BiTree&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id21'&gt;先序遍历(根左右)&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='n'&gt;Status&lt;/span&gt; &lt;span class='nf'&gt;PreOrderTraverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;BiTree&lt;/span&gt; &lt;span class='n'&gt;T&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='n'&gt;InitStack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;StackEmpty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;             &lt;span class='n'&gt;visite&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//访问p&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;             &lt;span class='n'&gt;StackPush&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;             &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;lchild&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='n'&gt;StackPop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;             &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;rchild&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//while&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;OK&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id22'&gt;中序遍历(左根右)&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='n'&gt;Status&lt;/span&gt; &lt;span class='nf'&gt;InOrderTraverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;BiTree&lt;/span&gt; &lt;span class='n'&gt;T&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='n'&gt;InitStack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;StackEmpty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;             &lt;span class='n'&gt;StackPush&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;             &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;lchild&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;             &lt;span class='n'&gt;StackPop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;             &lt;span class='n'&gt;visite&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;             &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;rchild&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//while&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id='id23'&gt;后序遍历(左右根)&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='n'&gt;Status&lt;/span&gt; &lt;span class='nf'&gt;PostOrderTraverse&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;BiTree&lt;/span&gt; &lt;span class='n'&gt;T&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='n'&gt;InitStack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;T&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;StackEmpty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;         &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;             &lt;span class='n'&gt;StackPush&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;             &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;lchild&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//while&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;         &lt;span class='n'&gt;GetTop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//取得栈顶元素的值&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;rchild&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='nb'&gt;NULL&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='n'&gt;lastVisite&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;rchild&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;             &lt;span class='n'&gt;visite&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;             &lt;span class='n'&gt;lastVisite&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//记录上一次访问的结点&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;             &lt;span class='n'&gt;StackPop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;             &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nb'&gt;NULL&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;             &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;rchild&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//while&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;     &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;OK&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/09/02/binary-tree-traverse</link>
                <guid>http://yangxikun.github.io/算法/2013/09/02/binary-tree-traverse</guid>
                <pubDate>2013-09-02T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>拓扑排序</title>
                <description>&lt;h3 id='id18'&gt;什么是拓扑序列&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;若集合X上的关系是R,且R是自反的、反对称的和传递的，则称R是集合X上的偏序关系。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;偏序关系又称半序关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;设A是一个非空集，P是A上的一个关系，若关系P是自反的、反对称的、和传递的，则称P是集合A上的偏序关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;即P适合下列条件：&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;对任意的a∈A,(a,a)∈P;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;若(a,b)∈P且(b,a)∈P,则a=b;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;若(a,b)∈P,(b,c)∈P,则(a,c)∈P,则称P是A上的一个偏序关系。带偏序关系的集合A称为偏序集或半序集。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;设R是集合X上的偏序(Partial Order),如果对每个x,y属于X必有xRy 或 yRx，则称R是集合X上的全序关系。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;比较简单的理解：偏序是指集合中只有部分成员可以比较，全序是指集合中所有的成员之间均可以比较。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='aov'&gt;AOV网&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;用顶点表示活动，用弧表示活动间的优先关系的有向图称为顶点表示活动的网（Activity On Vertex Network)，简称AOV网。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;AOV网是一种有向无回路的图。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id19'&gt;拓扑排序的使用&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;验证一个有向图无回路存在:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1.在有向图中选一个没有前驱的顶点且输出之.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2.从图中删除该顶点和所有以它为尾的弧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3.设一栈暂存所有入度为零的顶点.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='n'&gt;Status&lt;/span&gt; &lt;span class='nf'&gt;TopologicalSort&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;ALGraph&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='c1'&gt;//有向图G采用邻接表存储结构&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='c1'&gt;//若G无回路,则输出G的顶点的一个拓扑序列并返回OK,否则ERROR.&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='n'&gt;FindInDegree&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;indegree&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;    &lt;span class='c1'&gt;//对各顶点求入度indegree[0...vernum-1]&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='n'&gt;InitStack&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='o'&gt;&amp;lt;&lt;/span&gt;&lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='c1'&gt;//建零入度顶点栈S&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;indegree&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;StackPush&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;//入度为0者进栈&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='cm'&gt;/*上面步骤可以在FindInDegree()函数中完成*/&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='n'&gt;count&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//对输出顶点计数&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='n'&gt;StackEmpty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;         &lt;span class='n'&gt;StackPop&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='n'&gt;printf&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vertices&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;data&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='n'&gt;count&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;   &lt;span class='c1'&gt;//输出i号顶点并计数&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;         &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vertices&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;i&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='n'&gt;firstarc&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;nextarc&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;&lt;span class='c1'&gt;//对i号顶点的每个邻接点的入度减1&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;             &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;--&lt;/span&gt;&lt;span class='n'&gt;indegree&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;adjvex&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='n'&gt;StackPush&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;adjvex&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;&lt;span class='c1'&gt;//若入度为零,则入栈&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;         &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//for&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//while&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='n'&gt;count&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='n'&gt;G&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;vexnum&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;ERROR&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    &lt;span class='c1'&gt;//该有向图有回路&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;     &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='n'&gt;OK&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='c1'&gt;//TopologicalSort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/算法/2013/08/30/topological-sort</link>
                <guid>http://yangxikun.github.io/算法/2013/08/30/topological-sort</guid>
                <pubDate>2013-08-30T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>带着操作系统的知识编程</title>
                <description>&lt;h3 id='id15'&gt;标题解释&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在coding时,有时遇到的问题可以用操作系统的知识来解决.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id16'&gt;问题描述&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在一个PHP代码文件里有两段主要代码:其一是提供A数据(这部分代码给个昵称为ACode),其二是提供B数据(这部分代码给个昵称为BCode).其中BCode需要A数据中的部分数据(给个昵称为need)才能计算出B数据.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;那么通常的做法就是先执行ACode得到A数据后,BCode再执行不就行了?可如果出现下面这种情况:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;假设ACode执行到得到need的时间为t1,执行得到A数据的时间为t2,且t1小于t2很多,那么BCode就要等待很久才执行.也许你会想:那就把BCode放在ACode得到need数据之后执行,但这样的话,ACode剩下的那部分代码就要等到BCode执行完后再执行.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;现在需要的实现是:ACode在得到need的时候,BCode就能很快开始执行,而ACode剩下的代码可以和BCode并行执行.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id17'&gt;如何实现?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;模拟操作系统进程同步的实现,这里将ACode比喻为ACode进程,BCode比喻为BCode进程.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;从问题描述可以看出ACode进程和BCode进程之间存在同步关系,即BCode需要ACode计算出的need数据,且他们之间的制约关系为:直接相互制约(源于进程间的合作).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;为了实现ACode进程和BCode进程能在一定程度上并行,需要提供一个输入缓冲区.当ACode进程计算得到need数据后就放入缓冲区中,BCode进程&amp;#8221;监听&amp;#8221;缓冲区,一旦有数据存入,便取出并计算出B数据.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='php'&gt;PHP代码要如何设计?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;首先将ACode和BCode分为两个php代码文件,这里我模拟的是两个ajax并发请求,其中A请求从服务器获取A数据,B请求从服务器获取B数据,ACode和BCode之间的&amp;#8221;缓冲区&amp;#8221;使用memcached实现.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;前台代码:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD HTML 4.01 Transitional//EN&amp;quot; &amp;quot;http://www.w3.org/TR/html4/loose.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;meta&lt;/span&gt; &lt;span class='na'&gt;http-equiv=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;content=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;text/html; charset=UTF-8&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Wp Migration&lt;span class='nt'&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://code.jquery.com/jquery-1.9.1.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;             &lt;span class='nt'&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;                 &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;                     &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;#myForm&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;on&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;click&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;e&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;                          &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ajax&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;                             &lt;span class='nx'&gt;url&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;ACode.php&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;                             &lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;serialize&lt;/span&gt;&lt;span class='p'&gt;(),&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;                             &lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt;                             &lt;span class='nx'&gt;success&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;                                 &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;#result&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;                             &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt;                         &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;18&lt;/span&gt;                          &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ajax&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;                             &lt;span class='nx'&gt;url&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;BCode.php&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;                             &lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;serialize&lt;/span&gt;&lt;span class='p'&gt;(),&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;                             &lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;22&lt;/span&gt;                             &lt;span class='nx'&gt;success&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt;23&lt;/span&gt;                                 &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;#result&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;append&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;24&lt;/span&gt;                             &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;25&lt;/span&gt;                         &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;26&lt;/span&gt;                         &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;27&lt;/span&gt;                     &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;28&lt;/span&gt;                 &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='lineno'&gt;29&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;30&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;31&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;32&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;button&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;myForm&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;click&lt;span class='nt'&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;33&lt;/span&gt;         &lt;span class='nt'&gt;&amp;lt;div&lt;/span&gt; &lt;span class='na'&gt;id=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;34&lt;/span&gt;     &lt;span class='nt'&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class='lineno'&gt;35&lt;/span&gt; &lt;span class='nt'&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;ACode代码:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='nv'&gt;$memcached&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;memcached&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;fetch&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='nv'&gt;$memcached&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;addServer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;11211&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='nv'&gt;$key&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//ACode和BCode通信的标识&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='nv'&gt;$sellerId&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;456789&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='c1'&gt;//need数据&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$memcached&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$key&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nv'&gt;$sellerId&lt;/span&gt; &lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;100&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;){&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;         &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;json_encode&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;addOk&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;         &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;json_encode&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;hasAdd&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;BCode代码:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='nv'&gt;$memcached&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;memcached&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;fetch&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='nv'&gt;$memcached&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;addServer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;11211&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;     &lt;span class='nv'&gt;$key&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='c1'&gt;//ACode和BCode通信的标识&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$value&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nv'&gt;$memcached&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='na'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nv'&gt;$key&lt;/span&gt; &lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='k'&gt;FALSE&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='c1'&gt;//&amp;quot;监听&amp;quot;直到ACode将need数据存入&amp;quot;缓冲区&amp;quot;&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt;         &lt;span class='c1'&gt;//这里可以用sleep()函数设置多久检测一次&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;8&lt;/span&gt;     &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='nb'&gt;json_encode&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nv'&gt;$value&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;9&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/08/28/write-code-with-process-idea</link>
                <guid>http://yangxikun.github.io/PHP/2013/08/28/write-code-with-process-idea</guid>
                <pubDate>2013-08-28T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>php 变量(下)</title>
                <description>&lt;p&gt;&lt;em&gt;学习自&lt;a href='http://www.php-internals.com/book/'&gt;TIPI&lt;/a&gt;,做个小结,内容从TIPI中选取&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='id8'&gt;常量&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;常量是在变量的zval结构的基础上添加了一些额外的元素,内部结构如下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;_zend_constant&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='n'&gt;zval&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='cm'&gt;/* zval结构，PHP内部变量的存储结构 */&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;flags&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='cm'&gt;/* 常量的标记如 CONST_PERSISTENT | CONST_CS | CONST_CT_SUBST*/&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;     &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='cm'&gt;/* 常量名称 */&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='n'&gt;uint&lt;/span&gt; &lt;span class='n'&gt;name_len&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  
&lt;span class='lineno'&gt;6&lt;/span&gt;     &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;module_number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='cm'&gt;/* 模块号 */&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;zend_constant&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;flags值说明:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;默认值为CONT_CS,表示大小写敏感 CONST_PERSISTENT表示常量要持久化 CONST_CT_SUBST在编译时可被替换,在PHP内核中这些常量包括：TRUE、FALSE、NULL、ZEND_THREAD_SAFE和ZEND_DEBUG_BUILD五个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='id9'&gt;标准常量的初始化&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;通过define()函数定义的常量的模块编号都是PHP_USER_CONSTANT，这表示是用户定义的常量。 除此之外我们在平时使用较多的常量：如错误报告级别E_ALL, E_WARNING等常量就有点不同了。 这些是PHP内置定义的常量，他们属于标准常量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;在Zend引擎启动后，会执行如下的标准常量注册操作,&lt;code&gt;php_module_startup() -&amp;gt; zend_startup() -&amp;gt; zend_register_standard_constants()&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;zend_register_standard_constants&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;TSRMLS_D&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='p'&gt;...&lt;/span&gt; &lt;span class='c1'&gt;//  若干常量以REGISTER_MAIN_LONG_CONSTANT设置，&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;     &lt;span class='n'&gt;REGISTER_MAIN_LONG_CONSTANT&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;E_ALL&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;E_ALL&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;CONST_PERSISTENT&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; &lt;span class='n'&gt;CONST_CS&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;     &lt;span class='p'&gt;...&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;REGISTER_MAIN_LONG_CONSTANT()是一个宏，用于注册一个长整形数字的常量，因为C是强类型 语言，不同类型的数据等分别处理，以上的宏展开到下面这个函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='n'&gt;ZEND_API&lt;/span&gt; &lt;span class='kt'&gt;void&lt;/span&gt; &lt;span class='nf'&gt;zend_register_long_constant&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;const&lt;/span&gt; &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;uint&lt;/span&gt; &lt;span class='n'&gt;name_len&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;         &lt;span class='kt'&gt;long&lt;/span&gt; &lt;span class='n'&gt;lval&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;flags&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;module_number&lt;/span&gt; &lt;span class='n'&gt;TSRMLS_DC&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='n'&gt;zend_constant&lt;/span&gt; &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;  
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;type&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;IS_LONG&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;lval&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;lval&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;flags&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;flags&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;zend_strndup&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;name&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;name_len&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;name_len&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;name_len&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='n'&gt;c&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;module_number&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;module_number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='n'&gt;zend_register_constant&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;&amp;amp;&lt;/span&gt;&lt;span class='n'&gt;c&lt;/span&gt; &lt;span class='n'&gt;TSRMLS_CC&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;代码很容易理解，前面看到注册内置常量都是用了CONST_PERSISTENT标志位，也就是说， 这些常量都是持久化常量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id10'&gt;魔术常量&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP提供了大量的预定义常量，有一些是内置的，也有一些是扩展提供的，只有在加载了这些扩展库时才会出现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;不过PHP中有七个魔术常量，他们的值其实是变化的，它们的值随着它们在代码中的位置改变而改变。 所以称他们为魔术常量。例如 &lt;strong&gt;LINE&lt;/strong&gt; 的值就依赖于它在脚本中所处的行来决定。 这些特殊的常量不区分大小写,分别有:__LINE__,__FILE__,__DIR__,__FUNCTION____CLASS__,__METHOD__,__NAMESPACE__。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP内核会在词法解析时将这些常量的内容赋值进行替换，而不是在运行时进行分析。这些常量其实相当于一个占位符，在词法解析时这些占位符就被替换成实际的值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id11'&gt;预定义变量&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;诸如$_GET，$_POST，$_SERVER，$_FILES等变量都是PHP的预定义变量,PHP是在脚本运行之前就将预定义变量加入到了符号表。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id12'&gt;静态变量&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Zend为每个函数(准确的说是zend_op_array)分配了一个私有的符号表来保存该函数的静态变量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id13'&gt;类型提示的实现&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP中的类型提示功能只能用于参数为对象的提示，而无法用于为整数，字串，浮点等类型提示。在PHP5.1之后，PHP支持对数组的类型提示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='n'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;array_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Array&lt;/span&gt; &lt;span class='err'&gt;$&lt;/span&gt;&lt;span class='n'&gt;arr&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='n'&gt;print_r&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='err'&gt;$&lt;/span&gt;&lt;span class='n'&gt;arr&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='n'&gt;array_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;以上代码会在运行时产生错误报告。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='n'&gt;function&lt;/span&gt; &lt;span class='nf'&gt;array_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;Array&lt;/span&gt; &lt;span class='err'&gt;$&lt;/span&gt;&lt;span class='n'&gt;arr&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='n'&gt;print_r&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='err'&gt;$&lt;/span&gt;&lt;span class='n'&gt;arr&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='n'&gt;array_print&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;以上代码会在中间代码生成时产生错误报告,具体实现翻书吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id14'&gt;变量的作用域&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP中的变量都保存在符号表中,对于全局变量和局部变量,分别存放在symbol_table和相对应的active_symbol_table.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;变量的作用域是使用不同的符号表来实现的，于是顶层的全局变量在函数内部使用时， 需要先使用global语句来将变量“挪”到函数独立的*active_symbol_table中， 即变量的跨域操作。&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/08/24/php-val2</link>
                <guid>http://yangxikun.github.io/PHP/2013/08/24/php-val2</guid>
                <pubDate>2013-08-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>php 变量(上)</title>
                <description>&lt;p&gt;&lt;em&gt;学习自&lt;a href='http://www.php-internals.com/book/'&gt;TIPI&lt;/a&gt;,做个小结&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='php'&gt;PHP变量类型&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;标量类型:boolean,integer,float,string 复合类型:array,object 特殊类型:resource,NULL&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id6'&gt;变量存储结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;zval结构体定义在Zend/zend.h文件中,其结构如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='cm'&gt;/*&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='cm'&gt; * zval&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='cm'&gt; */&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;_zval_struct&lt;/span&gt; &lt;span class='n'&gt;zval&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;_zval_struct&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='cm'&gt;/* Variable information */&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='n'&gt;zvalue_value&lt;/span&gt; &lt;span class='n'&gt;value&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;     &lt;span class='cm'&gt;/* value */&lt;/span&gt;                   &lt;span class='c1'&gt;//存储变量的值&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='n'&gt;zend_uint&lt;/span&gt; &lt;span class='n'&gt;refcount__gc&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;                                 &lt;span class='c1'&gt;//引用计数,默认值为1&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='n'&gt;zend_uchar&lt;/span&gt; &lt;span class='n'&gt;type&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    &lt;span class='cm'&gt;/* active type */&lt;/span&gt;               &lt;span class='c1'&gt;//变量具体类型&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='n'&gt;zend_uchar&lt;/span&gt; &lt;span class='n'&gt;is_ref__gc&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;                                  &lt;span class='c1'&gt;//是否为引用,默认值为0&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt; &lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;zval结构体的&lt;strong&gt;type&lt;/strong&gt;字段就是实现&lt;strong&gt;弱类型&lt;/strong&gt;最关键的字段了，type的值可以为： IS_NULL、IS_BOOL、IS_LONG、IS_DOUBLE、IS_STRING、IS_ARRAY、IS_OBJECT和IS_RESOURCE 之一。 从字面上就很好理解，他们只是类型的唯一标示，根据类型的不同将不同的值存储到value字段。 除此之外，和他们定义在一起的类型还有IS_CONSTANT和IS_CONSTANT_ARRAY。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='id7'&gt;变量的值存储结构&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;变量的值存储在zvalue_value联合体中，结构体定义如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;union&lt;/span&gt; &lt;span class='n'&gt;_zvalue_value&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;     &lt;span class='kt'&gt;long&lt;/span&gt; &lt;span class='n'&gt;lval&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;                  &lt;span class='cm'&gt;/* long value */&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='kt'&gt;double&lt;/span&gt; &lt;span class='n'&gt;dval&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;                &lt;span class='cm'&gt;/* double value */&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;         &lt;span class='kt'&gt;char&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;val&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;         &lt;span class='kt'&gt;int&lt;/span&gt; &lt;span class='n'&gt;len&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;str&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='n'&gt;HashTable&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;ht&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;              &lt;span class='cm'&gt;/* hash table value */&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='n'&gt;zend_object_value&lt;/span&gt; &lt;span class='n'&gt;obj&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;zvalue_value&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;使用联合体而不是用结构体是出于空间利用率的考虑，因为一个变量同时只能属于一种类型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;一般类型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;布尔型/整型的变量值存储于(zval).value.lval中，其类型也会以相应的IS_*进行存储。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实数型存储于(zval).value.dval中,其类型为IS_DOUBLE。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;NULL值的变量值不需要存储，只需要把(zval).type标为IS_NULL。&lt;code&gt;Z_TYPE_P(z)=IS_NULL; &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;资源类型的存储与其他一般变量无异，但其初始化及存取实现则不同。&lt;code&gt;Z_TYPE_P(z) = IS_RESOURCE;  Z_LVAL_P(z) = l; &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;* 字符串的类型标示和其他数据类型一样，不过在存储字符串时多了一个字符串长度的字段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;数组Array,最强大变量类型。数组的值存储在zvalue_value.ht字段中，它是一个HashTable类型的数据。 PHP的数组使用哈希表来存储关联数据。哈希表是一种高效的键值对存储结构。PHP的哈希表实现中使用了两个数据结构HashTable和Bucket。 PHP所有的工作都由哈希表实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对象Object,PHP的对象是一种复合型的数据，使用一种zend_object_value的结构体来存放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;typedef&lt;/span&gt; &lt;span class='k'&gt;struct&lt;/span&gt; &lt;span class='n'&gt;_zend_object_value&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='n'&gt;zend_object_handle&lt;/span&gt; &lt;span class='n'&gt;handle&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;//  unsigned int类型，EG(objects_store).object_buckets的索引&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='n'&gt;zend_object_handlers&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='n'&gt;zend_object_value&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;PHP的对象只有在运行时才会被创建，EG宏，是一个全局结构体用于保存在运行时的数据。 其中就包括了用来保存所有被创建的对象的对象池，EG(objects_store)，而object对象值内容的zend_object_handle域就是当前 对象在对象池中所在的索引，handlers字段则是将对象进行操作时的处理函数保存起来,这个结构体及对象相关的类的结构为zend_class_entry。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/08/24/php-val</link>
                <guid>http://yangxikun.github.io/PHP/2013/08/24/php-val</guid>
                <pubDate>2013-08-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>PHP生命周期</title>
                <description>&lt;p&gt;&lt;em&gt;学习自&lt;a href='http://www.php-internals.com/book/'&gt;TIPI&lt;/a&gt;，整文为总结，斜体字为自己添加的内容&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;PHP的执行分三个阶段：处理请求的开始阶段、处理请求阶段、请求之后的结束阶段。&lt;/p&gt;

&lt;h4 id='id3'&gt;处理请求的开始阶段：&lt;/h4&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1 模块初始化阶段(MINIT)，在整个SAPI生命周期内(例如Apache启动以后的整个生命周期内或者命令行程序整个执行过程中)，该过程只进行一次。&lt;em&gt;(这应该就是为何修改了php.ini之后，要重启Apache的原因)&lt;/em&gt;；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2 模块激活阶段(RINIT)，该过程发生在请求阶段， 例如通过url请求某个页面，则在每次请求之前都会进行模块激活。&lt;em&gt;(为何不先激活呢？因为方便模块在RINIT阶段针对各种请求设置环境变量或其他的操作)&lt;/em&gt;；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='id4'&gt;处理请求阶段：&lt;/h3&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1 词法分析：将php文件翻译成一个个的token；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2 语法分析：根据生成的token和语法规则进行分析；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3 Zend引擎：将代码编译为opcode后并执行，在执行的过程中还会重复进行编译-执行，例如执行了include语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;(为何不在第一次编译就把这些包含进来的文件也一起编译好？)&lt;/em&gt;；&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;.调用SAPI的输出函数返回执行结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='id5'&gt;处理请求的结束阶段：&lt;/h3&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1 停用模块：RSHUTDOWN对应于RINIT，释放资源等操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2 关闭模块：MSHUTDOWN对应于MINIT，SAPI生命周期结束(Web服务器退出或者命令行脚本执行完毕退出)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/08/24/php-life</link>
                <guid>http://yangxikun.github.io/PHP/2013/08/24/php-life</guid>
                <pubDate>2013-08-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>PHP新的垃圾回收机制</title>
                <description>&lt;p&gt;&lt;em&gt;参考自&lt;a href='http://blog.csdn.net/phpkernel/article/details/5734743'&gt;PHP新的垃圾回收机制:Zend GC详解&lt;/a&gt;和&lt;a href='http://php.net/manual/zh/features.gc.refcounting-basics.php'&gt;引用计数基本知识&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='id2'&gt;什么算垃圾?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;当一个变量的refcount_gc为0时,将会被作为垃圾进行回收处理.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='_'&gt;新的垃圾回收机制所要解决的问题: 顽固垃圾&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;什么是顽固垃圾?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例:当我们添加一个数组本身作为这个数组的元素时,代码如下:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;array&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;one&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt;&lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='o'&gt;=&amp;amp;&lt;/span&gt; &lt;span class='nv'&gt;$a&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt; &lt;span class='nx'&gt;xdebug_debug_zval&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;代码输出:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;refcount&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;is_ref&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='k'&gt;array&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;    &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;refcount&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;is_ref&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;refcount&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;is_ref&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;=...&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;引用手册中的图解:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='PHPGC' src='/assets/img/201308240101.png' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;能看到数组变量 (a) 同时也是这个数组的第二个元素(1) 指向的变量容器中“refcount”为 2。上面的输出结果中的&amp;#8221;&amp;#8230;&amp;#8220;说明发生了递归操作, 显然在这种情况下意味着&amp;#8221;&amp;#8230;&amp;#8220;指向原始数组。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;对一个变量调用unset，将删除这个符号，且它指向的变量容器中的引用次数也减1。所以，如果我们在执行完上面的代码后，对变量$a调用unset, 那么变量 $a 和数组元素 &amp;#8220;1&amp;#8221; 所指向的变量容器的引用次数减1, 从&amp;#8221;2&amp;#8221;变成&amp;#8221;1&amp;#8221;. 下例可以说明:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;refcount&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;is_ref&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='k'&gt;array&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;    &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;refcount&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;is_ref&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;=&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;refcount&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;is_ref&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;=...&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;引用手册中的图解:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='PHPCG' src='/assets/img/201308240102.png' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;所以新的垃圾回收机制要处理的就是类似以上示例的顽固垃圾.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='gc'&gt;新的GC算法&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在较新的PHP手册中有简单的介绍新的GC使用的垃圾清理算法，这个算法名为&lt;strong&gt;Concurrent Cycle Collection in Reference Counted Systems&lt;/strong&gt; 这里不详细介绍此算法，根据手册中的内容来先简单的介绍一下思路：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;首先我们有几个基本的准则：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果一个zval的refcount_gc增加，那么此zval还在使用，不属于垃圾&lt;/li&gt;

&lt;li&gt;如果一个zval的refcount_gc减少到0， 那么zval可以被释放掉，不属于垃圾&lt;/li&gt;

&lt;li&gt;如果一个zval的refcount_gc减少之后大于0，那么此zval还不能被释放，此zval可能成为一个垃圾&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;只有在准则3下，GC才会把zval收集起来，然后通过新的算法来判断此zval是否为垃圾。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;那么如何判断这么一个变量是否为真正的垃圾呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;简单的说，就是对此zval中的每个元素进行一次refcount减1操作，操作完成之后，如果zval的refcount=0，那么这个zval就是一个垃圾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;引用手册中的图解:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='PHPCG' src='/assets/img/201308240103.jpeg' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A：为了避免每次变量的refcount_gc减少的时候都调用GC的算法进行垃圾判断，此算法会先把所有前面准则3情况下的zval节点放入一个节点(root)缓冲区(root buffer)，并且将这些zval节点标记成紫色，同时算法必须确保每一个zval节点在缓冲区中之出现一次。当缓冲区被节点塞满的时候，GC才开始开始对缓冲区中的zval节点进行垃圾判断。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;B：当缓冲区满了之后，算法以深度优先对每一个zval节点所包含的zval进行减1操作，为了确保不会对同一个zval的refcount重复执行减1操作，一旦zval的refcount减1之后会将zval标记成灰色。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;C：算法再次以深度优先判断每一个节点包含的zval的值，如果zval的refcount等于0，那么将其标记成白色&lt;em&gt;图中明明为蓝色!&lt;/em&gt;(代表垃圾)，如果zval的refcount大于0，那么将对此zval以及其包含的zval进行refcount加1操作，这个是对非垃圾的还原操作，同时将这些zval的颜色变成黑色(zval的默认颜色属性).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;D：遍历zval节点，将C中标记成白色的节点zval释放掉。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='phpgc'&gt;PHP中运用新的GC的算法&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在PHP中，GC默认是开启的，你可以通过ini文件中的 zend.enable_gc 项来开启或则关闭GC。当GC开启的时候，垃圾分析算法将在节点缓冲区(roots buffer)满了之后启动。缓冲区默认可以放10,000个节点，当然你也可以通过修改Zend/zend_gc.c中的GC_ROOT_BUFFER_MAX_ENTRIES 来改变这个数值，需要重新编译链接PHP。当GC关闭的时候，垃圾分析算法就不会运行，但是相关节点还会被放入节点缓冲区，这个时候如果缓冲区节点已经放满，那么新的节点就不会被记录下来，这些没有被记录下来的节点就永远也不会被垃圾分析算法分析。如果这些节点中有循环引用，那么有可能产生内存泄漏。之所以在GC关闭的时候还要记录这些节点，是因为简单的记录这些节点比在每次产生节点的时候判断GC是否开启更快，另外GC是可以在脚本运行中开启的，所以记录下这些节点，在代码运行的某个时候如果又开启了GC，这些节点就能被分析算法分析。当然垃圾分析算法是一个比较耗时的操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;在PHP代码中我们可以通过gc_enable()和gc_disable()函数来开启和关闭GC，也可以通过调用gc_collect_cycles()在节点缓冲区未满的情况下强制执行垃圾分析算法。这样用户就可以在程序的某些部分关闭或则开启GC，也可强制进行垃圾分析算法。&lt;/p&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/08/24/php-garbage-collection-mechanism</link>
                <guid>http://yangxikun.github.io/PHP/2013/08/24/php-garbage-collection-mechanism</guid>
                <pubDate>2013-08-24T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>PHP 底层机制</title>
                <description>&lt;p&gt;&lt;em&gt;注：本博文转载自&lt;a href='http://stblog.baidu-tech.com/?p=763'&gt;百度搜索研发部官方博客&lt;/a&gt;&lt;/em&gt; &lt;em&gt;小部分内容有修改，关键字使用粗体标出，斜体字为自己添加的内容，改善了原博文的排版&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='1php'&gt;1.什么是PHP？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;一种适用于web开发的动态语言。具体点说：就是一个用c语言实现包含大量组件的软件框架。更狭义点看，可以把它认为是一个强大的ui框架.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='2php'&gt;2.为何要了解PHP的底层？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;了解一门语言的实现将有助于我们更好的使用这门语言，优化我们的程序性能，可以了解到在什么地方该用它，什么地方不该使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id='3php_'&gt;3.PHP 的设计理念及特点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;多进程模型：由于php是多进程模型，不同请求间互不干涉，这样保证了一个请求挂掉不会对全盘服务造成影响.&lt;/li&gt;

&lt;li&gt;弱类型语言：和c/c++、java、c#等语言不同，PHP是一门&lt;strong&gt;弱类型语言&lt;/strong&gt;：一个变量的类型并不是一开始就确定不变，运行中才会确定并可能发生隐式或显式的类型转换，这种机制的灵活性在web开发中非常方便、高效，具体会在后面php变量中详述.&lt;/li&gt;

&lt;li&gt;引擎(Zend)+组件(ext)的模式&lt;strong&gt;降低内部耦合&lt;/strong&gt;&lt;em&gt;(软件工程中的东西)&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;中间层(sapi)隔绝web server和PHP * 语法简单灵活，没有太多规范&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='4php'&gt;4.PHP四层系统结构&lt;/h3&gt;

&lt;p&gt;&lt;img alt='PHP四层系统结构' src='/assets/img/201308210101.jpg' /&gt;&lt;/p&gt;

&lt;h5 id='zend'&gt;Zend引擎&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Zend整体用纯c实现，是php的内核部分，它将php代码翻译(词法、语法解析等一系列编译过程)为可执行opcode的处理并实现相应的处理方法、实现了基本的数据结构(如hashtable、oo)、内存分配及管理、提供了相应的api方法供外部调用，是一切的核心，所有的外围功能均围绕zend实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id='extensions'&gt;Extensions&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;围绕着zend引擎，extensions通过组件式的方式提供各种基础服务，我们常见的各种&lt;strong&gt;内置函数&lt;/strong&gt;（如array系列）、标准库等都是通过extension来实现，用户也可以根据需要实现自己的extension以达到功能扩展、性能优化等目的（如贴吧正在使用的php中间层、富文本解析就是extension的典型应用）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id='sapi'&gt;SAPI&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;全称是Server Application Programming Interface，也就是服务端应用编程接口，sapi通过一系列&lt;strong&gt;钩子函数&lt;/strong&gt;（如Apache的hook机制），使得php可以和外围交互数据，这是php非常优雅和成功的一个设计，通过sapi成功的将php本身和上层应用解耦隔离，php可以不再考虑如何针对不同应用进行兼容，而应用本身也可以针对自己的特点实现不同的处理方式，后面将在sapi章节中介绍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id='id1'&gt;上层应用&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;这就我们平时编写的php程序，通过不同的sapi方式得到各种各样的应用模式，如通过webserver实现web应用、在命令行下以脚本方式运行（CLI模式）等等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;这个比方很贴切~&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果php是一辆车，那么车的框架就是php本身，Zend是车的引擎（发动机），Ext下面的各种组件就是车的轮子，Sapi可以看做是公路，车可以跑在不同类型的公路上，而一次php程序的执行就是汽车跑在公路上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，我们需要：性能优异的引擎+合适的车轮+正确的跑道&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='5sapi'&gt;5.Sapi&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如前所述，sapi通过通过一系列的接口，使得外部应用可以和php交换数据并可以根据不同应用特点实现特定的处理方法，我们常见的一些sapi有：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;apache2handler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这是以apache作为webserver，采用mod_php模式运行时候的处理方式，也是现在应用最广泛的一种&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;cgi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;webserver和php直接的另一种交互方式，也就是大名鼎鼎的fastcgi协议，在最近今年&lt;strong&gt;fastcgi+php&lt;/strong&gt;（nginx+fastcgi+php）得到越来越多的应用，也是异步webserver所唯一支持的方式。关于fastcgi和mod_php，可以参见另外一篇文章&lt;a href='http://wenku.it168.com/d_000436406.shtml'&gt;《php性能调研-mod_php vs fastcgi》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;cli&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;命令行调用的应用模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Sapi的定义及主要接口函数如下图&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='Sapi' src='/assets/img/201308210102.jpg' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这里介绍一下其中一些主要函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;startup：php被调用时初始化操作&lt;/li&gt;

&lt;li&gt;比如cgi模式，在startup的时候会加载所有的extension并执行模块初始化工作。&lt;/li&gt;

&lt;li&gt;shutdown：php关闭时收尾工作&lt;/li&gt;

&lt;li&gt;activate：请求初始化&lt;/li&gt;

&lt;li&gt;dectivate：请求结束时收尾工作&lt;/li&gt;

&lt;li&gt;ub_write：指定数据输出方式,比如apache2handler方式，由于php作为apache的一个so存在，因此其输出也就是调用apache的ap_write函数，而在cgi模式下，会系统调用write。&lt;/li&gt;

&lt;li&gt;sapi_error：错误处理函数&lt;/li&gt;

&lt;li&gt;read_post：读取post数据&lt;/li&gt;

&lt;li&gt;register_server_variables：往$_SERVER中注册环境变量,这个一般根据不同协议标准注册注册的变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='6phpopcode'&gt;6.Php的执行流程&amp;amp;opcode&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;我们先来看看php代码的执行所经过的流程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='OPCODE' src='/assets/img/201308210103.jpg' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;从图上可以看到，php实现了一个典型的动态语言执行过程：拿到一段代码后，经过词法解析、语法解析等阶段后，源程序会被翻译成一个个指令(opcodes)，然后ZEND虚拟机顺次执行这些指令完成操作。Php本身是用c实现的，因此最终调用的也都是c的函数，实际上，我们可以把php看做是一个c开发的软件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;通过上面描述不难看出，php的执行的核心是翻译出来的一条一条指令，也即&lt;strong&gt;opcode&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Opcode是php程序执行的最基本单位。一个opcode由两个参数(op1,op2)、返回值和处理函数组成。Php程序最终被翻译为一组opcode处理函数的顺序执行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;常见的几个处理函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;ZEND_ASSIGN_SPEC_CV_CV_HANDLER : 变量分配 （$a=$b）&lt;/li&gt;

&lt;li&gt;ZEND_DO_FCALL_BY_NAME_SPEC_HANDLER：函数调用&lt;/li&gt;

&lt;li&gt;ZEND_CONCAT_SPEC_CV_CV_HANDLER：字符串拼接 $a.$b&lt;/li&gt;

&lt;li&gt;ZEND_ADD_SPEC_CV_CONST_HANDLER: 加法运算 $a+2&lt;/li&gt;

&lt;li&gt;ZEND_IS_EQUAL_SPEC_CV_CONST：判断相等 $a==1&lt;/li&gt;

&lt;li&gt;ZEND_IS_IDENTICAL_SPEC_CV_CONST：判断相等 $a===1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='7hashtable_'&gt;7.HashTable （核心数据结构）&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;zend的核心数据结构&lt;strong&gt;HashTable&lt;/strong&gt;，在php里面几乎并用来实现所有常见功能，我们知道的php数组即是其典型应用，此外，在zend内部，如函数符号表、全局变量等也都是基于hash table来实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;php的hash table具有如下特点：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;支持典型的key-&amp;gt;value查询 * 可以当做数组使用&lt;/li&gt;

&lt;li&gt;添加、删除节点是O（1）复杂度&lt;/li&gt;

&lt;li&gt;key支持混合类型：同时存在关联数组合索引数组&lt;/li&gt;

&lt;li&gt;Value支持混合类型：array(“string”,2332)&lt;/li&gt;

&lt;li&gt;支持线性遍历：如foreach&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Zend hash table实现了典型的hash表散列结构，同时通过附加一个双向链表，提供了正向、反向遍历数组的功能。其结构如下图&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='HASHTABLE' src='/assets/img/201308210104.jpg' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;zend hash table数据结构：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以看到，在hash table中既有key-&amp;gt;value形式的散列结构，也有双向链表模式，使得它能够非常方便的支持快速查找和线性遍历。&lt;/li&gt;

&lt;li&gt;Zend的散列结构是典型的hash表模型，通过链表的方式来解决冲突。需要注意的是zend的hash table是一个自增长的数据结构，当hash表数目满了之后，其本身会动态以2倍的方式扩容并重置元素位置。初始大小均为8。&lt;/li&gt;

&lt;li&gt;另外，在进行key-&amp;gt;value快速查找时候，zend本身还做了一些优化，通过空间换时间的方式加快速度。比如在每个元素中都会用一个变量nKeyLength标识key的长度以作快速判定。&lt;/li&gt;

&lt;li&gt;Zend hash table通过一个链表结构，实现了元素的线性遍历。理论上，做遍历使用单向链表就够了，之所以使用双向链表，主要目的是为了快速删除，避免遍历。&lt;/li&gt;

&lt;li&gt;Zend hash table是一种复合型的结构，作为数组使用时，即支持常见的关联数组也能够作为顺序索引数字来使用，甚至允许2者的混合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP关联数组&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;关联数组是典型的hash_table应用。一次查询过程经过如下几步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='cpp'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='n'&gt;getKeyHashValue&lt;/span&gt; &lt;span class='n'&gt;h&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; &lt;span class='n'&gt;index&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;n&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='n'&gt;nTableMask&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='n'&gt;Bucket&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;arBucket&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;index&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='k'&gt;while&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;((&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;h&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;h&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;nKeyLength&lt;/span&gt; &lt;span class='o'&gt;==&lt;/span&gt; &lt;span class='n'&gt;nKeyLength&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;        &lt;span class='n'&gt;RETURN&lt;/span&gt; &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='n'&gt;p&lt;/span&gt;&lt;span class='o'&gt;-&amp;gt;&lt;/span&gt;&lt;span class='n'&gt;next&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='n'&gt;RETURN&lt;/span&gt; &lt;span class='n'&gt;FALTURE&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;从代码可以看出，这是一个常见的hash查询过程并增加一些快速判定加速查找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP索引数组&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;索引数组就是我们常见的数组，通过下标访问。例如 $arr[0]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Zend HashTable内部进行了归一化处理，对于index类型key同样分配了hash值和nKeyLength(为0)。内部成员变量nNextFreeElement就是当前分配到的最大id，每次push后自动加一。正是这种归一化处理，php才能够实现关联和非关联的混合。由于push操作的特殊性，索引key在php数组中先后顺序并不是通过下标大小来决定，而是由push的先后决定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;例如 $arr[1] = 2; $arr[2] = 3;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于double类型的key，Zend HashTable会将他当做索引key处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h3 id='8php'&gt;8.PHP变量&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;概述&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Php是一门弱类型语言，本身不严格区分变量的类型。&lt;/li&gt;

&lt;li&gt;Php在变量申明的时候不需要指定类型。&lt;/li&gt;

&lt;li&gt;Php在程序运行期间可能进行变量类型的隐示转换。 * 和其他强类型语言一样，程序中也可以进行显示的类型转换。&lt;/li&gt;

&lt;li&gt;Php变量可以分为简单类型(int、string、bool)、集合类型(array resource object)和常量(const)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;以上所有的变量在底层都是同一种结构 zval.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Zval是zend中另一个非常重要的数据结构，用来标识并实现php变量，其数据结构如下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt='ZVAL' src='/assets/img/201308210105.jpg' /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Zval主要由三部分组成：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;type：指定了变量所述的类型（整数、字符串、数组等）&lt;/li&gt;
&lt;li&gt;refcount_gc,is_ref_gc：用来实现引用计数(后面具体介绍)&lt;/li&gt;
&lt;li&gt;value：核心部分，存储了变量的实际数据&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Zvalue&lt;/strong&gt;是用来保存一个变量的实际数据。因为要存储多种类型，所以zvalue是一个union，也由此实现了弱类型。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Php变量类型和其实际存储对应关系如下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;IS_LONG   -&gt; lvalue&lt;/li&gt;
&lt;li&gt;IS_DOUBLE -&gt; dvalue&lt;/li&gt;
&lt;li&gt;IS_ARRAY  -&gt; ht&lt;/li&gt;
&lt;li&gt;IS_STRING -&gt; str&lt;/li&gt;
&lt;li&gt;IS_RESOURCE -&gt; lvalue&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;引用计数&lt;/strong&gt;在内存回收、字符串操作等地方使用非常广泛，PHP中的变量就是引用计数的典型应用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Zval的引用计数通过成员变量is_ref和ref_count实现，通过引用计数，多个变量可以共享同一份数据。避免频繁拷贝带来的大量消耗。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;在进行赋值操作时，zend将变量指向相同的zval同时ref_count_gc++，在unset操作时，对应的ref_count_gc-1。只有ref_count_gc减为0时才会真正执行销毁操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;如果是引用赋值，则zend会修改is_ref_gc为1（如$a=&amp;amp;$b）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写时拷贝&lt;/strong&gt;PHP变量通过引用计数实现变量共享数据，那如果改变其中一个变量值呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;当试图写入一个变量时，Zend若发现该变量指向的zval被多个变量共享，则为其复制一份refcount_gc为1的zval，并递减原zval的refcount_gc，这个过程称为“zval分离”。可见，只有在有写操作发生时zend才进行拷贝操作，因此也叫copy-on-write(写时拷贝)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;对于引用型变量，其要求和非引用型相反，引用赋值的变量间必须是捆绑的，修改一个变量就修改了所有捆绑变量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;整数、浮点数类型变量：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;整数、浮点数是php中的基础类型之一，也是一个简单型变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于整数和浮点数，在zvalue中直接存储对应的值。其类型分别是long和double。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;从zvalue结构中可以看出，对于整数类型，和c等强类型语言不同，php是不区分int、unsigned int、long、long long等类型的，对它来说，整数只有一种类型也就是long。由此，可以看出，在php里面，整数的取值范围是由编译器位数来决定而不是固定不变的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于浮点数，类似整数，它也不区分float和double而是统一只有double一种类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在php中，如果整数范围越界了怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这种情况下会自动转换为double类型，这个一定要小心，很多trick都是由此产生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;字符串变量：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;和整数一样，字符变量也是php中的基础类型和简单型变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;通过zvalue结构可以看出，在php中，字符串是由指向实际数据的指针和长度结构体组成，这点和c++中的string比较类似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;由于通过一个实际变量表示长度，和c不同，它的字符串可以是2进制数据（包含\0），同时在php中，求字符串长度strlen是O(1)操作。在新增、修改、追加字符串操作时，php都会重新分配内存生成新的字符串。最后，出于安全考虑，php在生成一个字符串时末尾仍然会添加\0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;常见的字符串拼接方式及速度比较&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;假设有如下4个变量：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;$strA=‘123’; $strB = ‘456’; $intA=123; intB=456;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;现在对如下的几种字符串拼接方式做一个比较和说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;1、$res = $strA.$strB和$res = “$strA$strB”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这种情况下，zend会重新malloc一块内存并进行相应处理，其速度一般&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2、$strA = $strA.$strB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这种是速度最快的，zend会在当前strA基础上直接relloc，避免重复拷贝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3、$res = $intA.$intB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这种速度较慢，因为需要做隐式的格式转换，实际编写程序中也应该注意尽量避免&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;4、$strA = sprintf (“%s%s”,$strA.$strB);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这会是最慢的一种方式，因为sprintf在php中并不是一个语言结构，本身对于格式识别和处理就需要耗费比较多时间，另外本身机制也是malloc。不过sprintf的方式最具可读性，实际中可以根据具体情况灵活选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;如前所述，Php的数组通过Zend HashTable来天然实现&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;foreach操作如何实现？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;对一个数组的foreach就是通过遍历hashtable中的双向链表完成。对于索引数组，通过foreach遍历效率比for高很多，省去了key-&amp;gt;value的查找，Count操作直接调用HashTable-NumOfElements，O(1)操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;对于’123’这样的字符串，zend会转换为其整数形式。$arr[‘123’]和$arr[123]是等价的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;资源类型变量：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这是php中最复杂的一种变量，也是一种复合型结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP的zval可以表示广泛的数据类型，但是对于自定义的数据类型却很难充分描述。由于没有有效的方式描绘这些复合结构，因此也没有办法对它们使用传统的操作符。要解决这个问题，只需要通过一个本质上任意的标识符（label）引用指针，这种方式被称为资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在zval中，对于resource，lval作为指针来使用，直接指向资源所在的地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Resource可以是任意的复合结构，我们熟悉的mysqli、fsock、memcached等都是资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于一个自定义的数据类型，要想将它作为资源。首先需要进行注册，zend会为它分配全局唯一标示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;* 获取一个资源变量&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于资源，zend维护了一个id-&amp;gt;实际数据的hash_tale。对于一个resource，在zval中只记录了它的id。fetch的时候通过id在hash_table中找到具体的值返回&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;* 资源销毁&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;资源的数据类型是多种多样的。Zend本身没有办法销毁它。因此需要用户在注册资源的时候提供销毁函数。当unset资源时，zend调用相应的函数完成析构。同时从全局资源表中删除它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;* 持久化资源&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;资源可以长期驻留，不只是在所有引用它的变量超出作用域之后，甚至是在一个请求结束了并且新的请求产生之后。这些资源称为持久资源，因为它们贯通SAPI的整个生命周期持续存在，除非特意销毁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;很多情况下，持久化资源可以在一定程度上提高性能。比如我们常见的mysql_pconnect ,持久化资源通过pemalloc分配内存，这样在请求结束的时候不会释放。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对zend来说，对两者本身并不区分。&lt;em&gt;(?哪两者？)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;PHP变量的作用域：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;PHP中的局部变量和全局变量是如何实现的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对于一个请求，任意时刻php都可以看到两个符号表(symbol_table和active_symbol_table)，其中前者用来维护全局变量。后者是一个指针，指向当前活动的变量符号表，当程序进入到某个函数中时，zend就会为它分配一个符号表x同时将active_symbol_table指向a。通过这样的方式实现全局、局部变量的区分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;获取变量值：php的符号表是通过hash_table实现的，对于每个变量都分配唯一标识，获取的时候根据标识从表中找到相应zval返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;函数中使用全局变量：在函数中，我们可以通过显式申明global来使用全局变量。在active_symbol_table中创建symbol_table中同名变量的引用，如果symbol_table中没有同名变量则会先创建。&lt;em&gt;我的理解：变量是存在symbol_table中的(如果存在的话,不存在则自动创建)，如果使用global声明,则会在active_symbol_table创建这个变量的引用)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</description>
                <link>http://yangxikun.github.io/PHP/2013/08/23/php-internal</link>
                <guid>http://yangxikun.github.io/PHP/2013/08/23/php-internal</guid>
                <pubDate>2013-08-23T00:00:00+08:00</pubDate>
        </item>

        <item>
                <title>Hello World</title>
                <description>&lt;h3 id='github'&gt;这是我在GitHub上的第一篇博文,向世界说声:你好!&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='php'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='cp'&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;     &lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='cp'&gt;?&amp;gt;&lt;/span&gt;&lt;span class='x' /&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</description>
                <link>http://yangxikun.github.io/2013/08/20/hello-world</link>
                <guid>http://yangxikun.github.io/2013/08/20/hello-world</guid>
                <pubDate>2013-08-20T00:00:00+08:00</pubDate>
        </item>


</channel>
</rss>
